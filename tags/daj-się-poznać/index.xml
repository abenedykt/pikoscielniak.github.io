<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daj Się Poznać on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/daj-si%C4%99-pozna%C4%87/</link>
    <description>Recent content in Daj Się Poznać on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Apr 2016 23:00:00 +0200</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/daj-si%C4%99-pozna%C4%87/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>oidc-token-manager library with Google Identity Platform - Part 2</title>
      <link>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/</link>
      <pubDate>Mon, 11 Apr 2016 23:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a continuation of the previous one
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;previous one&lt;/a&gt;
where I started to describe my attempt to use library &lt;em&gt;oidc-token-manager&lt;/em&gt; with Google Identity Platform.&lt;/p&gt;

&lt;p&gt;I was stuck at the moment when this library couldn’t validate a signature for an access token because of the unexpected format of the certs. I found in the documentation that I can provide certs for this library myself in the config and the library wouldn’t make a request for them.&lt;/p&gt;

&lt;p&gt;I did this in the &lt;em&gt;config&lt;/em&gt; property by specifying the value for the &lt;em&gt;jwks&lt;/em&gt; property. After this, &lt;em&gt;config&lt;/em&gt; in &lt;em&gt;index.html&lt;/em&gt; looked like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   authority: &amp;quot;https://accounts.google.com&amp;quot;,
   client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
   redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/callback.html&amp;quot;,
   post_logout_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/index.html&amp;quot;,
   response_type: &amp;quot;id_token token&amp;quot;,
   scope: &amp;quot;email&amp;quot;,
   silent_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/frame.html&amp;quot;,
   popup_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/popup.html&amp;quot;,
   jwks: {
       keys: [{
           kty: &amp;quot;RSA&amp;quot;,
           x5c: [&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wD …[removded for brevity ]... eTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;]
       }]
   },
   silent_renew: true
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and in the &lt;em&gt;callback.html&lt;/em&gt;, &lt;em&gt;config&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   authority: &amp;quot;https://accounts.google.com&amp;quot;,
   client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
   jwks: {
       keys: [{
           kty: &amp;quot;RSA&amp;quot;,
           x5c:  [&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wD …[removded for brevity ]... eTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;]
       }]
   },
};

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found a value for this &lt;em&gt;x5c&lt;/em&gt; property requesting this url
&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34;&gt;https://www.googleapis.com/oauth2/v1/certs&lt;/a&gt;&lt;/a&gt;
and this url I found in the file downloaded from Google Developer Console, which I used in the previous post to get the &lt;em&gt;client_id&lt;/em&gt;.
You can read
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;here&lt;/a&gt;
how I got it. (link).
Hardcoding the value for &lt;em&gt;x5c&lt;/em&gt; is a very bad solution because Google often changes certs but for testing it&amp;rsquo;s sufficient for me.&lt;/p&gt;

&lt;p&gt;After this, when I opened the application I got this screen: [networkError.png]&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/networkError.png&#34; alt=&#34;Network error&#34; title=&#34;Network error&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And the web browser console showed me this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/userInfo404.png&#34; alt=&#34;Userinfo 404&#34; title=&#34;Userinfo 404&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This error came from a request for userinfo. Fortunately, I don’t need to get a user profile. All I need to know about the user is their email and it is in the token. So I can turn off loading the user profile with this option:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load_user_profile : false,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this option set to &lt;em&gt;false&lt;/em&gt;, the &lt;em&gt;oidc-token-manager&lt;/em&gt; library won’t send requests to Google for a user profile. After this, another attempt to get a token resulted in the
following message in the browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/profileFalseResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could see my token was also in the local storage of the browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/tokenInLocalStorage.png&#34; alt=&#34;Token in local storage&#34; title=&#34;Token in local storage&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I got a token from Google Identity Provider and I could use it to get access to the API but my solution is far from perfect.&lt;/p&gt;

&lt;p&gt;I made a dangerous assumption in the configuration of &lt;em&gt;oidc-token-manager&lt;/em&gt;.
While fetching certs from this url &lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v1/certs&#34;&gt;https://www.googleapis.com/oauth2/v1/certs&lt;/a&gt;&lt;/a&gt;, I got a response like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIBzgwCmlF7SMwDQYJKoZIhvcNAQEFBQAwNjE0MDIGA1UE\nAxMrZmVkZXJhdGVkLXNpZ25vbi5zeXN0ZW0uZ3NlcnZpY … [removed for brevity]... ]eOV9CqsTSJCZ9baLqF4wk6botNe187A88wnj5OVbyoVZK4SMW\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg6gAwIBAgIIUQ9p7LoIOI8wDQYJKoZIhvcNAQEFB …[removed for brevity]... xcOKB6l8wBqKDmyc1aMXZ+H0WkBgvcEHqeTh45xGznVwh8\n-----END CERTIFICATE-----\n&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I assumed that the second cert was the right one to validate the token. I chose the second one because the first one didn’t work. Instead of this, I should have made a choice dependent on the value provided in the token header which looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;alg&amp;quot;:&amp;quot;RS256&amp;quot;,&amp;quot;kid&amp;quot;:&amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The property &lt;em&gt;kid&lt;/em&gt; indicates that in the object with certs, I should use the one with the property like the &lt;em&gt;kid&lt;/em&gt; value. I discovered that this was the second property but it won’t always be true. I should choose a certificate dynamically but I didn’t want to change source code of the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, so that’s why I hardcoded it.&lt;/p&gt;

&lt;p&gt;An authentication is a non-trivial challenge for any app. Many developers have tools and techniques they trust for building traditional (page-by-page) auth flows.
I thought for a while about building a traditional membership system but I finally decided to try something different. We’ll see the consequences of my choices in the future. For now, I have proven that I can obtain access tokens from Google using the library &lt;em&gt;oidc-token-manager&lt;/em&gt;, but the implementation isn’t perfect. If I want to use this library, I would have to change it a bit. I don’t want to do this until I check other possibilities. Future posts will be about the further exploration of the web client authentication with Google Identity Provider.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>oidc-token-manager library with Google Identity Platform - Part 1</title>
      <link>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/</link>
      <pubDate>Thu, 07 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As I stated in this
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;post&lt;/a&gt;,
I am going to write a series of posts about auth stuff.
This post will be the second in this series and I am describing my experiences trying to use the library
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager&#34; target=&#34;_blank&#34;&gt;oidc-token-manager&lt;/a&gt;
to get tokens from the Google Identity Platform.&lt;/p&gt;

&lt;p&gt;As I mentioned before, I want to have a single page application which gets tokens from
Identity Provider and sends them to REST API to get access to resources.&lt;/p&gt;

&lt;p&gt;To validate this solution, I was searching for a pure javascript library which allows me to get a token from OpenId Connect Identity Provider, refreshes this token (yes, even in implicit flow), gives me access to some information from it, stores this token and destroys it on my request.&lt;/p&gt;

&lt;p&gt;I was looking for a library which fulfills my needs and I found one.
It is called &lt;em&gt;oidc-token-manager&lt;/em&gt;. This library has everything what I want:
Redirects for token&lt;br /&gt;
Processes token&lt;br /&gt;
Removes token&lt;br /&gt;
Renews token&lt;/p&gt;

&lt;p&gt;But this library is dedicated for
&lt;a href=&#34;https://github.com/IdentityServer/IdentityServer3&#34; target=&#34;_blank&#34;&gt;IdentityServer&lt;/a&gt;
which is a .NET implementation of protocols like
&lt;a href=&#34;http://openid.net/connect/&#34; target=&#34;_blank&#34;&gt;OpenID Connect&lt;/a&gt; and
&lt;a href=&#34;http://oauth.net/2/&#34; target=&#34;_blank&#34;&gt;OAuth2&lt;/a&gt;.
I wanted to use it with Google not with IdentityServer, but Google Identity Provider is also compatible with
OpenID Connect and OAuth2. There was hope and below I have written about how I verified this hope.&lt;/p&gt;

&lt;p&gt;I didn’t use my Notifier project to test this library. I did this with a small sample application, so let’s jump right into it and see how it looked.&lt;/p&gt;

&lt;p&gt;The library &lt;em&gt;oidc-token-manager&lt;/em&gt; has a nice
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager/tree/master/sample/vs&#34; target=&#34;_blank&#34;&gt;sample project&lt;/a&gt;
in its repository. I used it as a starting point.&lt;/p&gt;

&lt;p&gt;I created a new folder (&lt;code&gt;mkdir NotifierDemo&lt;/code&gt;) and inside it I copied everything what was in
&lt;a href=&#34;https://github.com/IdentityModel/oidc-token-manager/tree/master/sample/vs/Sample&#34; target=&#34;_blank&#34;&gt;this folder&lt;/a&gt;.
I removed all the stuff related to Visual Studio. My file structure looked like this in
&lt;a href=&#34;https://www.jetbrains.com/webstorm/&#34; target=&#34;_blank&#34;&gt;WebStorm&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/fileTree.png&#34; alt=&#34;File tree&#34; title=&#34;File tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I needed a server to host my application and I decided to use a simple &lt;em&gt;Node.js&lt;/em&gt; server called
&lt;a href=&#34;https://www.npmjs.com/package/http-server&#34; target=&#34;_blank&#34;&gt;http-server&lt;/a&gt;
but first I had to create a &lt;em&gt;package.json&lt;/em&gt; file. I did this using &lt;code&gt;npm init&lt;/code&gt;, after answering every question I had the file &lt;em&gt;package.json&lt;/em&gt; inside my project.&lt;/p&gt;

&lt;p&gt;Then I installed &lt;em&gt;http-server&lt;/em&gt; and saved it as a development dependency using this command: &lt;code&gt;npm install http-server --save-dev&lt;/code&gt;.
Then I added script &lt;em&gt;dev&lt;/em&gt; to &lt;em&gt;package.json&lt;/em&gt; so the &lt;em&gt;scripts&lt;/em&gt; section looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 &amp;quot;dev&amp;quot;: &amp;quot;http-server -p 5000&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The option &lt;em&gt;-p&lt;/em&gt; is a port on which the server will be running. I had to set this port to 5000 because I specified it for my client in the Google Developer Console.&lt;/p&gt;

&lt;p&gt;Now I ready to start connecting my application with Google Identity Provider.&lt;/p&gt;

&lt;p&gt;I started in the file &lt;em&gt;index.html&lt;/em&gt; and his file has a &lt;em&gt;config&lt;/em&gt; variable which contains the whole configuration for &lt;em&gt;oidc-token-manager&lt;/em&gt;. I had the setting needed for this configuration in the file which I downloaded at the end of the
&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;previous post&lt;/a&gt;.
This file looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;web&amp;quot;:{&amp;quot;client_id&amp;quot;:&amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,&amp;quot;project_id&amp;quot;:&amp;quot;notifierdemo-1268&amp;quot;,&amp;quot;auth_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/auth&amp;quot;,&amp;quot;token_uri&amp;quot;:&amp;quot;https://accounts.google.com/o/oauth2/token&amp;quot;,&amp;quot;auth_provider_x509_cert_url&amp;quot;:&amp;quot;https://www.googleapis.com/oauth2/v1/certs&amp;quot;,&amp;quot;client_secret&amp;quot;:&amp;quot;jDvSf78IkYDGEw9FI_gnXEnZ&amp;quot;,&amp;quot;redirect_uris&amp;quot;:[&amp;quot;http://localhost:5000/callback.html&amp;quot;],&amp;quot;javascript_origins&amp;quot;:[&amp;quot;http://localhost:5000&amp;quot;]}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I took &lt;em&gt;client_id&lt;/em&gt; which was in the property with the same name. I also changed &lt;em&gt;scope&lt;/em&gt; in &lt;em&gt;config&lt;/em&gt; and only left &lt;em&gt;email&lt;/em&gt; in &lt;em&gt;scope&lt;/em&gt; and I set &lt;em&gt;authority&lt;/em&gt; property. At this stage, my &lt;em&gt;config&lt;/em&gt; in &lt;em&gt;index.html&lt;/em&gt; looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
    authority: &amp;quot;https://accounts.google.com&amp;quot;,
    client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;,
    redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/callback.html&amp;quot;,
    post_logout_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/index.html&amp;quot;,
    response_type: &amp;quot;id_token token&amp;quot;,
    scope: &amp;quot;email&amp;quot;,
    silent_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/frame.html&amp;quot;,
    popup_redirect_uri: window.location.protocol + &amp;quot;//&amp;quot; + window.location.host + &amp;quot;/popup.html&amp;quot;,
    silent_renew: true
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also set &lt;em&gt;authority&lt;/em&gt; and &lt;em&gt;client_id&lt;/em&gt; in the &lt;em&gt;config&lt;/em&gt; variable in &lt;em&gt;callback.html&lt;/em&gt; so it looks like this;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
    authority: &amp;quot;https://accounts.google.com&amp;quot;,
    client_id: &amp;quot;342665198077-tp56a5pab4ei5lri37nkba69b6sqghou.apps.googleusercontent.com&amp;quot;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seemed to me that I was ready, so I ran my application with the command &lt;code&gt;npm run dev&lt;/code&gt;.
I navigated in the browser to &lt;em&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt; and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/appWindow.png&#34; alt=&#34;Application Window&#34; title=&#34;Application Window&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on the &lt;em&gt;Get Token&lt;/em&gt; button. And nothing happened. And then the investigation began.
I opened a browser console and saw:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/AllowOriginHeader.png&#34; alt=&#34;Not allowed access&#34; title=&#34;Not allowed access&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a well known issue. You can read a lot about it on the Internet.
To get rid of it quickly I used this
&lt;a href=&#34;https://chrome.google.com/webstore/detail/allow-control-allow-origi/nlfbmbojpeacfghkpbjhddihlkkiljbi?hl=en-US&#34; target=&#34;_blank&#34;&gt;chrome extension&lt;/a&gt;.
This extension gave me a button which allows me to enable cross-origin resource sharing.
This was a very ugly solution but for my testing purposes I accepted it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/crossOriginSharingExtension.png&#34; alt=&#34;Enable cross-origin resource sharing&#34; title=&#34;Enable cross-origin resource sharing&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After enabling cross-origin resource sharing. I navigated to &lt;em&gt;&lt;a href=&#34;http://localhost:5000&#34;&gt;http://localhost:5000&lt;/a&gt;&lt;/em&gt; again and I clicked on the &lt;em&gt;Get Token&lt;/em&gt; button once more. And this time I got following screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/notifierDemoWouldLikeTo.png&#34; alt=&#34;NotifierDemo would like to&#34; title=&#34;NotifierDemo would like to&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking &lt;em&gt;Allow&lt;/em&gt; I got this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google2/rsaKeysEmpty.png&#34; alt=&#34;RSA keys empty&#34; title=&#34;RSA keys empty&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After spending some time debugging, I finally got my answer. The library &lt;em&gt;oidc-token-manager&lt;/em&gt; fetches metadata from a &lt;em&gt;.well-known&lt;/em&gt; url. It is specified in the
&lt;a href=&#34;https://openid.net/specs/openid-connect-discovery-1_0.html&#34; target=&#34;_blank&#34;&gt;OpenID Connect Discovery 1.0&lt;/a&gt;
and in the case of Google, it looks like this
&lt;a href=&#34;https://accounts.google.com/.well-known/openid-configuration&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;https://accounts.google.com/.well-known/openid-configuration&#34;&gt;https://accounts.google.com/.well-known/openid-configuration&lt;/a&gt;&lt;/a&gt;.
The response from Google &lt;em&gt;.well-known&lt;/em&gt; url provides among others this property:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;jwks_uri&amp;quot;: &amp;quot;https://www.googleapis.com/oauth2/v3/certs&amp;quot;,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From this url: &lt;em&gt;&lt;a href=&#34;https://www.googleapis.com/oauth2/v3/certs&#34;&gt;https://www.googleapis.com/oauth2/v3/certs&lt;/a&gt;&lt;/em&gt;, &lt;em&gt;oidc-token-manager&lt;/em&gt; fetches the necessary certificates to validate the tokens.  This library assumes that the information about certs is provided as an object something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;keys&amp;quot;: [{
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;,
“x5c”:[&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;c8f37d70371587d2aaae3bbff624cc865ef10575&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg… [removed for brevity]  ...CAVCztq15Z\n-----END CERTIFICATE-----\n&amp;quot;
]
  }, {
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;,
    “x5c”:[&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;,
  &amp;quot;c8f37d70371587d2aaae3bbff624cc865ef10575&amp;quot;: &amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAg… [removed for brevity]  ...CAVCztq15Z\n-----END CERTIFICATE-----\n&amp;quot;
] }]
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But Google provides the following structure of information about certificates:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;keys&amp;quot;: [{
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;8087d258ac19c0fcf1dab7a908c221cdd81d5512&amp;quot;,
    &amp;quot;n&amp;quot;: &amp;quot;pmYJZAbSY2L …[removed for brevity]... 9dQNxhFaixl4BgqjaP9onw&amp;quot;,
    &amp;quot;e&amp;quot;: &amp;quot;AQAB&amp;quot;
  }, {
    &amp;quot;kty&amp;quot;: &amp;quot;RSA&amp;quot;,
    &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,
    &amp;quot;use&amp;quot;: &amp;quot;sig&amp;quot;,
    &amp;quot;kid&amp;quot;: &amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;,
    &amp;quot;n&amp;quot;: &amp;quot;pqLUr6XU-Ut4z_JS- …[removed for brevity]... H1QWo8bs2SXo3w&amp;quot;,
    &amp;quot;e&amp;quot;: &amp;quot;AQAB&amp;quot;
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The missing part is property &lt;em&gt;x5c&lt;/em&gt;. In this property, there is a public key needed to validate the signature of the tokens.
Google provides  a modulus(n) and an exponent(e) RSA public key but library &lt;em&gt;oidc-token-manager&lt;/em&gt; expects a PEM key which looks something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;-----BEGIN CERTIFICATE-----\nMIIDJjCCAgwIBA… [removed for brevity] ...ZTRsIQWyJ4hUP\n-----END CERTIFICATE-----\n&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also found that Google provides the following information in the header part of the JSON Web Token.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&amp;quot;alg&amp;quot;:&amp;quot;RS256&amp;quot;,&amp;quot;kid&amp;quot;:&amp;quot;428489e3a6753680152ffcf1a8f7d0379f28ce9e&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The property &lt;em&gt;kid&lt;/em&gt; indicates which public key from &lt;a href=&#34;https://www.googleapis.com/oauth2/v3/certs&#34;&gt;https://www.googleapis.com/oauth2/v3/certs&lt;/a&gt;, should be used to validate the signature. As it is an array of keys, you must choose one. The library &lt;em&gt;oidc-token-manager&lt;/em&gt; always takes the first one.&lt;/p&gt;

&lt;p&gt;I managed to get access token from Google Identity Provider using library &lt;em&gt;oidc-token-manager&lt;/em&gt;
but I couldn’t validate its signature because of the format of the certs returned from Google
but there must be a way to handle this kind of situation. However, I’ll write about this in the
&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up the Web client for Google Identity Platform</title>
      <link>http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/</link>
      <pubDate>Mon, 04 Apr 2016 22:00:00 +0200</pubDate>
      
      <guid>http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poz  nać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, I thought about a membership system in my application. I considered many options and during my research I tested many solutions, and gained some knowledge. The results from my initial search didn’t pan out as planned, so I’ll have to share my results in a series of posts, and this post will be part one.&lt;/p&gt;

&lt;p&gt;One of my ideas was not having a membership system at all and delegating this to a well known identity provider like Google or Facebook. I also wanted to have my application as a pure API with SPA client and moreover I wanted to have a stateless application. I didn’t want to have any sessions on the server side. So this problem requires me to use a bearer token authentication with implicit flow where a browser client gets an access token from Identity Provider and passes it to the API in every request. API validates this token and grants access or not to its resources.&lt;/p&gt;

&lt;p&gt;Before I start my work I must choose Identity Provider. I decided to use Google Identity Provider Platform, and then I must register a web application in this Platform.&lt;/p&gt;

&lt;p&gt;To create a web application client, I entered the
&lt;a href=&#34;https://console.developers.google.com&#34; target=&#34;_blank&#34;&gt;Google Developers Console&lt;/a&gt;
and then I chose &lt;em&gt;Create a project&amp;hellip;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createProject.png&#34; alt=&#34;Create a project&#34; title=&#34;Create a project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I specified &lt;em&gt;Project name&lt;/em&gt; and clicked &lt;em&gt;Create&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/newProject.png&#34; alt=&#34;New Project&#34; title=&#34;New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After a while my new application was visible in the &lt;em&gt;Dashboard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/dashboardWithNew.png&#34; alt=&#34;Dashboard&#34; title=&#34;Dashboard&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on &lt;em&gt;Enable and manage APIs&lt;/em&gt; and after I saw this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/apiManager.png&#34; alt=&#34;Api Manager&#34; title=&#34;Api Manager&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the left side, I can see a menu option &lt;em&gt;Credentials&lt;/em&gt; I clicked on this option and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/credentialsApiManager.png&#34; alt=&#34;Credentials tab&#34; title=&#34;Credentials tab&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I clicked on the middle tab named &lt;em&gt;OAuth consent screen&lt;/em&gt; and in the form I entered only a &lt;em&gt;Product name shown to users&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/consentScreen.png&#34; alt=&#34;OAuth consent screen&#34; title=&#34;OAuth consent screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I clicked &lt;em&gt;Save&lt;/em&gt;. After this, I was redirect back to the first tab: &lt;em&gt;Credentials&lt;/em&gt;. On this tab, I clicked &lt;em&gt;Create credentials&lt;/em&gt; I saw the following choices:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createCredentialsChoices.png&#34; alt=&#34;Create Credentials Choices&#34; title=&#34;Create Credentials Choices&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose &lt;em&gt;OAuth client ID&lt;/em&gt;. Then on the next screen I selected &lt;em&gt;Web application&lt;/em&gt; as a &lt;em&gt;Application type&lt;/em&gt; and I put name and urls.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/createClientId.png&#34; alt=&#34;Create ClientId&#34; title=&#34;Create ClientId&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked “Create” I saw this popup window:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/popupOAuthClient.png&#34; alt=&#34;OAuth Client&#34; title=&#34;OAuth Client&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I didn’t bother to copy this, since I got this letter in another form. I just clicked &lt;em&gt;OK&lt;/em&gt; and I saw this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/OAuth20ClientIds.png&#34; alt=&#34;OAuth client ids&#34; title=&#34;OAuth client ids&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the right side, I had a download icon (see red ellipse in the picture above). I clicked on it and the window to save file opened:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/04/google/saveFile.png&#34; alt=&#34;Save file&#34; title=&#34;Save file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I saved this file and I will return to it later in the next post.&lt;/p&gt;

&lt;p&gt;After this, Client for Google APIs was now ready to use and now I must create an application for it. As I mentioned before, this post is the first part about auth things.
In the &lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;next post&lt;/a&gt;,
I will continue this theme and I hope, I’ll show finally some code.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Publishing to Azure</title>
      <link>http://koscielniak.me/post/2016/03/publishing-to-azure/</link>
      <pubDate>Thu, 31 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/publishing-to-azure/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the
&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;last post&lt;/a&gt;,
I wrote how I prepared my application to be ready for publishing. In this post, I am going to write about how I published my application to Azure. I believe that my client should see the results of my work as quickly as possible. For my project, I only have an Imaginary Client but imaginary or not they also deserve respect.&lt;/p&gt;

&lt;p&gt;To publish my application to Azure, I went through following steps.&lt;/p&gt;

&lt;p&gt;After I logged into the
&lt;a href=&#34;https://portal.azure.com&#34; target=&#34;_blank&#34;&gt;Azure Portal&lt;/a&gt;, I clicked on the &lt;em&gt;New&lt;/em&gt; button in the top left corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/azureNew.png&#34; alt=&#34;New&#34; title=&#34;New&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I chose &lt;em&gt;Web + Mobile&lt;/em&gt; and after this I clicked on &lt;em&gt;Web App&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/webMobileWebApp.png&#34; alt=&#34;New Web App&#34; title=&#34;New Web App&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This gave me a window where I could specify the App name, Subscription, Resource group and App Service plan.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/newApp.png&#34; alt=&#34;New Web App name&#34; title=&#34;New Web App name&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When I clicked &lt;em&gt;Create&lt;/em&gt;, it took a while to create my brand new application.&lt;/p&gt;

&lt;p&gt;After this, I navigated to the application settings and inside, I chose &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Deployment Source&lt;/em&gt; &amp;gt; &lt;em&gt;Configure required settings&lt;/em&gt; &amp;gt; &lt;em&gt;Local Git Repository&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/deploymentSource.png&#34; alt=&#34;Deployment source&#34; title=&#34;Deployment source&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I clicked &lt;em&gt;Ok&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;After this, I navigated to &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Deployment credentials&lt;/em&gt; and I set up a deployment user by entering a username and password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/deploymentCredentials.png&#34; alt=&#34;Deployment credentials&#34; title=&#34;Deployment credentials&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This time the save button was at the top of this window.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/saveCredentialsButton.png&#34; alt=&#34;Save credentials button&#34; title=&#34;Save credentials button&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then inside &lt;em&gt;Settings&lt;/em&gt; &amp;gt; &lt;em&gt;Properties&lt;/em&gt; I found &lt;em&gt;GIT URL&lt;/em&gt; which is the url to the git repository where I should publish source code using credentials specified in &lt;em&gt;Deployment credentials&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/gitUrl.png&#34; alt=&#34;Git url&#34; title=&#34;Git url&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I added this repository as another remote in my local git repository by issuing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add azure [GIT URL]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where [GIT URL] is the url copied from the Azure portal.&lt;/p&gt;

&lt;p&gt;Then I entered in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git push -u azure master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After I entered this company, I was prompted to enter my password and the deployment process began. It took quite a lot of time before I was able to see my application in the browser. I found the public address of my application in &lt;em&gt;Settings&lt;/em&gt; -&amp;gt; &lt;em&gt;Properties&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/appAddress.png&#34; alt=&#34;Application url&#34; title=&#34;Application url&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After I clicked on it, I could see my application hosted as a Web App in Azure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/azure/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I was really surprised that the process of deployment to Azure was very easy and relatively intuitive. What surprised me the most was that Azure discovered where my web project was in the repository structure of folders. I like these kinds of things. Big kudos to the Azure team for this.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Before going into production</title>
      <link>http://koscielniak.me/post/2016/03/before-going-into-production/</link>
      <pubDate>Mon, 28 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/before-going-into-production/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been dealing with my project for a while and I haven’t shown anything to my Imaginary Client. They are starting to think that I haven’t done anything but burn their Imaginary Money. But I have done something. I have written posts, I have done research and I have learned a lot new things. To convince my Imaginary Client that I haven’t wasted their Imaginary Money I should quickly deploy something to production but before I do this I should tune my application a bit.&lt;/p&gt;

&lt;p&gt;The first thing I did was update Angular 2. There have been two new versions since I started this series. You can check this by command  &lt;code&gt;npm outdated&lt;/code&gt; executed in terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/npmOutdated.png&#34; alt=&#34;npm outdated output&#34; title=&#34;npm outdated output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It turned out that not only was Angular 2 outdated, but 5 other packages were outdated as well.
I changed the versions of every outdated package in &lt;em&gt;package.json&lt;/em&gt; to the newest one and after this I executed &lt;code&gt;npm update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, I added some npm packages by entering this in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install concurrently event-stream gulp-sourcemaps gulp-typescript gulp-inline-ng2-template --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;concurrently&lt;/em&gt; I used in my &lt;code&gt;postinstall&lt;/code&gt; script in &lt;em&gt;package.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 //...
 &amp;quot;build-dev&amp;quot;:&amp;quot;gulp build-dev&amp;quot;,
 &amp;quot;postinstall&amp;quot;: &amp;quot;concurrently \&amp;quot;typings install\&amp;quot; \&amp;quot;npm run build-dev\&amp;quot;&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time I execute &lt;code&gt;npm install&lt;/code&gt; the &lt;em&gt;typings&lt;/em&gt; will be installed and my &lt;em&gt;build-dev&lt;/em&gt; gulp task will be executed.&lt;/p&gt;

&lt;p&gt;The package &lt;em&gt;event-stream&lt;/em&gt; is what I needed to merge the streams into one and return it for further processing.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;gulp-sourcemaps&lt;/em&gt; package generates source maps that are embedded in the source file. Something like this is added at the bottom of every &lt;code&gt;.js&lt;/code&gt; file created from a TypeScript file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tYWlu….
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;gulp-typescript&lt;/em&gt; is used to compile TypeScript files.&lt;/p&gt;

&lt;p&gt;Finally, this package &lt;em&gt;gulp-inline-ng2-template&lt;/em&gt; inlines HTML and CSS files into the JavaScript files of Angular 2 components.&lt;/p&gt;

&lt;p&gt;All the packages I combined in one gulp task that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;build-prod&#39;, [&#39;build.lib&#39;], function () {
   var tsProject = typescript.createProject(&#39;./tsconfig.json&#39;, { typescript: require(&#39;typescript&#39;) });
   var tsSrcInlined = gulp.src([webroot + &#39;**/*.ts&#39;], { base: webroot })
       .pipe(inlineNg2Template({ base: webroot }));
   return eventStream.merge(tsSrcInlined, gulp.src([&#39;typings/browser/**/*.ts&#39;,&#39;typings/browser.d.ts&#39;]))
       .pipe(sourcemaps.init())
       .pipe(typescript(tsProject))
       .pipe(sourcemaps.write())
       .pipe(gulp.dest(webroot))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task complies all TypeScript files in my application and inlines source maps, CSS styles and HTML templates inside components and saves all the process files inside &lt;em&gt;wwwroot&lt;/em&gt; folder. This processing reduces the number of requests to my application. I know in the HTTP2 world it won’t be needed, but as far as I know, kestrel doesn’t have support for HTTP2 yet.&lt;/p&gt;

&lt;p&gt;The next thing which I did was a conditional import of Javascript and CSS files. Dependent on the environment, I loaded them either
from
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_delivery_network&#34; target=&#34;_blank&#34;&gt;CDN&lt;/a&gt;
for production or from local for development environment. An example how I did this in the file
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Shared/_Layout.cshtml&#34; target=&#34;_blank&#34;&gt;_Layout.cshtml&lt;/a&gt;
looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;environment names=&amp;quot;Development&amp;quot;&amp;gt;
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;&amp;gt;
            &amp;lt;script src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;/environment&amp;gt;
        &amp;lt;environment names=&amp;quot;Staging,Production&amp;quot;&amp;gt;            
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://code.getmdl.io/1.1.3/material.blue-teal.min.css&amp;quot;
             asp-fallback-href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;
             asp-fallback-test-class=&amp;quot;mdl-ripple&amp;quot; /&amp;gt;
            &amp;lt;script src=&amp;quot;https://code.getmdl.io/1.1.3/material.min.js&amp;quot;
                    asp-fallback-src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;
                    asp-fallback-test=&amp;quot;window.componentHandler&amp;quot;&amp;gt;
            &amp;lt;/script&amp;gt;
          &amp;lt;/environment&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;em&gt;environment&lt;/em&gt; tag is a new thing in ASP .NET Core and you can find out more about it
&lt;a href=&#34;http://docs.asp.net/en/latest/fundamentals/environments.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
As you can see, I used a fallback test to check if loading assets from CDN succeeded, if not, I loaded the local files.
I did something similar in the
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Home/Index.cshtml&#34; target=&#34;_blank&#34;&gt;Home/Index.cshtml&lt;/a&gt;
file which you can see in my github repository.&lt;/p&gt;

&lt;p&gt;In this file, I also turned on production mode in Angular 2 by executing the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  System.import(&#39;angular2/core&#39;)
            .then(function(core){
                    core.enableProdMode();
                    return System.import(&#39;./app/main&#39;);
            })
            .catch(console.log.bind(console));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to have this tag &lt;em&gt;environment&lt;/em&gt; working properly, I had to add this package
&lt;em&gt;Microsoft.AspNet.Mvc.TagHelpers&lt;/em&gt; to dependencies in &lt;em&gt;project.json&lt;/em&gt;
and in the file &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; I added following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@addTagHelper &amp;quot;*, Microsoft.AspNet.Mvc.TagHelpers&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see this tag in action, I must run my application in development mode. By default, &lt;code&gt;dnx web&lt;/code&gt; command runs an application in a production environment, so, to run the application in development mode I could do this by executing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, you can see that in development, my files are served from localhost:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/localFile.png&#34; alt=&#34;assets from local&#34; title=&#34;assets from local&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To test the production mode, I published my application in the local folder on my computer by entering the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnu publish -o ~/publishednotifier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;~/publishednotifier&lt;/em&gt; - it is the folder where my application will be published.&lt;/p&gt;

&lt;p&gt;Inside this folder, there is another folder called &lt;em&gt;approot&lt;/em&gt; where I can find scripts for every command declared in the section &lt;em&gt;commands&lt;/em&gt; in &lt;em&gt;project.json&lt;/em&gt; file. I had only one command &lt;em&gt;web&lt;/em&gt;.
Entering this command in terminal  ( &lt;code&gt;~/publishednotifier/approot/web&lt;/code&gt;) ran my application and I could see this in a web browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could see in the debug tool of the browser that my files are loaded from the CDN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/loadedFromCdn.png&#34; alt=&#34;Loaded form CDN&#34; title=&#34;Loaded form CDN&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I left space for further improvement in my project setup but I will leave the details for another post where I’ll write about package &lt;em&gt;Microsoft.AspNet.AngularServices&lt;/em&gt;.
Now, I am ready to publish my application to
&lt;a href=&#34;https://azure.microsoft.com&#34; target=&#34;_blank&#34;&gt;Azure&lt;/a&gt;. In the next post, I am going to write about what this process looked like.
&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Angular 2 Confirm Dialog Component</title>
      <link>http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/</link>
      <pubDate>Thu, 24 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This post is a continuation of the &lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;previous one&lt;/a&gt;.
I must honestly say that while writing this post I felt a bit guilty because I wrote about
something which I created in my project but I don’t need yet. I believe in
&lt;em&gt;You Aren&amp;rsquo;t Gonna Need It&lt;/em&gt; but while writing this post I violated my belief.
I described in this post how I created an Angular 2 confirm dialog component by wrapping a
Material Design Lite (MDL) dialog component. I feel awkward because I don’t need this component yet.
I didn’t have a use case for this component. I implemented it upfront which was a violation of
the YAGNI rule. Yes, I am aware of this. To justify my actions, I have only one reason:
it would be nice to implement this component and write about it now because it corresponds
with my previous
post and it&amp;rsquo;s quite likely that I will need this component in the future so my work won’t be wasted.&lt;/p&gt;

&lt;p&gt;The first thing I did was to create the following structure of folders and files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/appStructure.png&#34; alt=&#34;Folders tree&#34; title=&#34;Folders tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I added the following content to my &lt;em&gt;confirm.component.html&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div id=&amp;quot;confirmationModal&amp;quot; class=&amp;quot;dialog-container&amp;quot;&amp;gt;
   &amp;lt;div class=&amp;quot;mdl-card mdl-shadow--16dp&amp;quot;&amp;gt;
       &amp;lt;h5&amp;gt;{{title}}&amp;lt;/h5&amp;gt;
       &amp;lt;p&amp;gt;{{message}}&amp;lt;/p&amp;gt;
       &amp;lt;div class=&amp;quot;mdl-card__actions dialog-button-bar&amp;quot;&amp;gt;
           &amp;lt;button class=&amp;quot;mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect&amp;quot; id=&amp;quot;cancelButton&amp;quot;
                   data-upgraded=&amp;quot;,MaterialButton,MaterialRipple&amp;quot;&amp;gt;{{cancelText}}&amp;lt;span
                   class=&amp;quot;mdl-button__ripple-container&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;mdl-ripple&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
           &amp;lt;/button&amp;gt;
           &amp;lt;button class=&amp;quot;mdl-button mdl-button--accent mdl-button--raised mdl-js-button mdl-js-ripple-effect&amp;quot;
                   id=&amp;quot;okButton&amp;quot; data-upgraded=&amp;quot;,MaterialButton,MaterialRipple&amp;quot;&amp;gt;{{okText}}&amp;lt;span
                   class=&amp;quot;mdl-button__ripple-container&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;mdl-ripple&amp;quot;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
           &amp;lt;/button&amp;gt;
       &amp;lt;/div&amp;gt;
   &amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nothing special here. You can find out more about MDL dialogs
&lt;a href=&#34;https://www.getmdl.io/components/index.html#dialog-section&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’ll be using this dialog through the service which is defined in the file &lt;em&gt;confirm.service.ts&lt;/em&gt;
and the whole file looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Injectable} from &amp;quot;angular2/core&amp;quot;;

@Injectable()
export class ConfirmService {
   activate: (message?: string, title?: string) =&amp;gt; Promise&amp;lt;boolean&amp;gt;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see there is only one property in the class &lt;em&gt;ConfirmService&lt;/em&gt; which has type function.
This function takes two optional string parameters: message and title and returns
Promise of type boolean which will indicate of course whether a user confirms something or not.
I’ll assign value to this property in the
&lt;em&gt;ConfirmComponent&lt;/em&gt; constructor which you will see in a minute.&lt;/p&gt;

&lt;p&gt;If you wonder what &lt;em&gt;@Injectable()&lt;/em&gt; means, it’s a decorator.
This decorator is required if you have any dependencies in your service.
In my case, this isn’t true but it is recommended to always decorate services with this decorator.
You can read about it
&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/dependency-injection.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The key part is in the &lt;em&gt;confirm.component.ts&lt;/em&gt; file.
I am not going to show this whole file here, you can see it at this
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/wwwroot/app/shared/confirm/confirm.component.ts&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.
But I wrote about the crucial parts of this component. One of them is constructor:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constructor(confirmService:ConfirmService) {
   confirmService.activate = this.activate.bind(this);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the constructor, I assigned a function to the property &lt;em&gt;activate&lt;/em&gt; of &lt;em&gt;ConfirmService&lt;/em&gt;.
After this, calling activate on &lt;em&gt;ConfirmService&lt;/em&gt; will cause the function &lt;em&gt;activate&lt;/em&gt; from
&lt;em&gt;ConfirmComponent&lt;/em&gt; to be executed.&lt;/p&gt;

&lt;p&gt;Another important part of this component is method &lt;em&gt;ngOnInit&lt;/em&gt; from interface &lt;em&gt;OnInit&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngOnInit():any {
   this._confirmElement = document.getElementById(&#39;confirmationModal&#39;);
   this._cancelButton = document.getElementById(&#39;cancelButton&#39;);
   this._okButton = document.getElementById(&#39;okButton&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This method collects references to the elements from view and assigns
them to private fields in my component class.
This why I got access to the dialog itself, the cancel button and the ok button.&lt;/p&gt;

&lt;p&gt;Having these references allows me to assign handlers to &lt;em&gt;on click&lt;/em&gt; events
on buttons and I can show a modal dialog. These happened in &lt;em&gt;_show&lt;/em&gt; method:&lt;/p&gt;

&lt;p&gt;On ok click:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._okButton.onclick = ((e:any) =&amp;gt; {
   e.preventDefault();
   if (!positiveOnClick(e)) this._hideDialog()
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On cancel click:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._confirmElement.onclick = () =&amp;gt; {
   this._hideDialog();
   return negativeOnClick(null);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And to Show dialog:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;this._confirmElement.style.opacity = 1;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And of course I used modal dialog element reference to hide the dialog in method &lt;em&gt;_hideDialog&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;private _hideDialog() {
   document.onkeyup = null;
   this._confirmElement.style.opacity = 0;
   window.setTimeout(() =&amp;gt; this._confirmElement.style.zIndex = -1, 400);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The last import method in &lt;em&gt;ConfirmComponent&lt;/em&gt; is &lt;em&gt;activate&lt;/em&gt;, and this one is assigned to activate property of &lt;em&gt;ConfirmService&lt;/em&gt;. The code of this method is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;activate(message = this._defaults.message, title = this._defaults.title) {
   this._setLabels(message, title);

   let promise = new Promise&amp;lt;boolean&amp;gt;(resolve =&amp;gt; {
       this._show(resolve);
   });
   return promise;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The responsibilities of this method are to set the &lt;em&gt;title&lt;/em&gt; and &lt;em&gt;message&lt;/em&gt; properties,
create the promise, and passed
it to &lt;em&gt;_show&lt;/em&gt; method and finally return this promise to the caller. Nothing fancy here.&lt;/p&gt;

&lt;p&gt;The confirm is needed throughout the whole application. That’s why I added it to
the &lt;em&gt;AppComponent&lt;/em&gt;. Angular 2 has something which is called hierarchical
dependency injection system. In short, it means that if a parent component
has something injected as a dependency, in my case &lt;em&gt;AppComponent&lt;/em&gt;,
their children will get the same instance of this when they request it.
As all my components will be children of &lt;em&gt;AppComponent&lt;/em&gt;, all of them will
get access to the same &lt;em&gt;ConfirmSerivice&lt;/em&gt; instance.
My &lt;em&gt;AppComponent&lt;/em&gt; at that moment looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component, OnInit} from &#39;angular2/core&#39;;

import {ConfirmService} from &amp;quot;./shared/confirm/confirm.service&amp;quot;;
import {ConfirmComponent} from &amp;quot;./shared/confirm/confirm.component&amp;quot;;

declare var componentHandler:any;

@Component({
   selector: &#39;notifier&#39;,
   templateUrl: &#39;app/app.component.html&#39;,
   directives: [ConfirmComponent],
   providers: [
       ConfirmService
   ]
})
export class AppComponent implements OnInit {

   title = &amp;quot;Notifier!!!&amp;quot;;

   constructor(private _confirmService:ConfirmService) {
   }

   showConfirmDialog() {
       this._confirmService.activate(&amp;quot;Are you sure?&amp;quot;)
           .then(res =&amp;gt; console.log(`Confirmed: ${res}`));
   }

   ngOnInit():any {
       componentHandler.upgradeDom();
   }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Some parts of this file are especially important, for example, this line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  directives: [ConfirmComponent],
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I said that my component will be using other components, for now only one is specified:
&lt;em&gt;ConfirmComponent&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;In this fragment of code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; providers: [ConfirmService]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I registered providers required by the &lt;em&gt;AppComponent&lt;/em&gt;. Actually, I only specified the type -
&lt;em&gt;ConfirmService&lt;/em&gt;, and  Angular 2 knows what it should do. I could be more verbose and instead
of this shorthand syntax, I could write:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;providers: [
    provide(ConfirmService, {useClass: ConfirmService})
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But there is no reason to do this as you can use something more concise.&lt;/p&gt;

&lt;p&gt;Another important part in &lt;em&gt;AppComponent&lt;/em&gt; is its constructor which looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;constructor(private _confirmService:ConfirmService) {
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I used shorthand syntax which created a private field for me and at the same time a parameter of constructor. This field is of type
&lt;em&gt;ConfirmService&lt;/em&gt; and an instance of that type is provided by Angular 2 dependency injection system.&lt;/p&gt;

&lt;p&gt;The method &lt;em&gt;showConfirmDialog&lt;/em&gt; had nothing special:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;showConfirmDialog() {
   this._confirmService.activate(&amp;quot;Are you sure?&amp;quot;)
       .then(res =&amp;gt; console.log(`Confirmed: ${res}`));
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I opened the confirm dialog and when it is closed I printed the choice that was made in the console.&lt;/p&gt;

&lt;p&gt;A very important thing happened in the method &lt;em&gt;ngOnInit&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ngOnInit():any {
   componentHandler.upgradeDom();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This line is especially important:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; componentHandler.upgradeDom();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Material Design Lite will automatically register and render all elements marked with MDL
classes upon the page load. However, in the case where you are creating DOM elements dynamically,
you need to register new elements by yourself using either &lt;em&gt;componentHandler.upgradeDom&lt;/em&gt; or
&lt;em&gt;componentHandler.upgradeElement&lt;/em&gt;. Without this line, MDL components won’t work with Angular 2.&lt;/p&gt;

&lt;p&gt;And that’s it. That’s my whole work. I added only to &lt;em&gt;app.component.html&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;modal-confirm&amp;gt;&amp;lt;/modal-confirm&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also added some styling to the &lt;em&gt;ConfirmComponent&lt;/em&gt; by adding this line in the component decorator:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  @Component({
  //...
   styleUrls: [&#39;app/shared/confirm/confirm.component.css&#39;]
})

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And my final result looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After clicking Ok I got this in a web browser console:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/confirm/finalResultConsole.png&#34; alt=&#34;Final result in console&#34; title=&#34;Final result in console&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You can see the whole source code of this solution in the
&lt;a href=&#34;https://github.com/pikoscielniak/notifier&#34; target=&#34;_blank&#34;&gt;github repository&lt;/a&gt;
for this project.&lt;/p&gt;

&lt;p&gt;My implementation of the confirm dialog component is based on the work of John Papa from the
&lt;a href=&#34;http://app.pluralsight.com/courses/angular-2-first-look&#34; target=&#34;_blank&#34;&gt;Angular 2 First Look Pluralsight&lt;/a&gt;
course. I made some changes to adjust his solution to my reality. In the next post, I am going to write about messing around with the application setup but this time from a different perspective. See you then.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Adding styling to my application</title>
      <link>http://koscielniak.me/post/2016/03/adding-styling-to-my-application/</link>
      <pubDate>Mon, 21 Mar 2016 22:15:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/adding-styling-to-my-application/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My last &lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;post&lt;/a&gt;
described how I setup Angular 2 on the client-side of my Project.
I was a bit surprised how long that post turned out.
That’s why I decided to write about how I added styling to my application in another post.
This post is just about the research which I did to chose a visual style for my application and about
my final choice. I think about the posts in the “Daj się poznać” series as diary for what
I have done in my contest project, and that’s I’m writing this post.&lt;/p&gt;

&lt;p&gt;I really had a dilemma about which CSS framework to choose for my application but among many unknowns
I had one certain thing - I wanted to have
&lt;a href=&#34;https://www.google.com/design/spec/material-design/introduction.html&#34; target=&#34;_blank&#34;&gt;Material Design&lt;/a&gt;
in my application. Learning
Material Design was on my to-do list for a very long time, so I’m killing two birds with one stone.&lt;/p&gt;

&lt;p&gt;There are a lot of libraries and CSS frameworks that give you ready-to-use material design components.
I wanted to use one of them
but it wasn’t an easy task to choose one. I only going mention a few which interested me the most.&lt;/p&gt;

&lt;p&gt;I am qutie good at Angular 1.x and for this framework there is already a well-tested
implementation of Material Design. You can look at it on
this &lt;a href=&#34;https://material.angularjs.org/latest/&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;.
This framework would be an obvious choice if I used Angular 1.x on the client-side part
of my application. This framework has everything that I need. For Angular 2,
the choice wasn’t so obvious.&lt;/p&gt;

&lt;p&gt;There is already an official
&lt;a href=&#34;https://github.com/angular/material2&#34; target=&#34;_blank&#34;&gt;Material Design for Angular 2&lt;/a&gt;
but at the moment this post was written, it is currently in the early alpha stage and includes
only 6 components. I have gotten used to using Bleeding Edge stuff in my project but this
Edge is too sharp for me.
I wanted something more stable and reliable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nature abhors a vacuum&lt;/em&gt; especially in the JS/CSS world, so if there is a lack of something
it will appear quickly. I wouldn’t have searched for too long to find an alternative implementation.
On this &lt;a href=&#34;https://github.com/justindujardin/ng2-material&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;
I found an implementation of
Material Design components for Angular 2. This implementation has everything that
I need but my gut told me: “you shouldn’t use this”. I believe never to argue with my gut feeling.
Maybe it’s a bit too heavy, maybe it is too young. I don’t know but my gut probably knows better.&lt;/p&gt;

&lt;p&gt;Another material design framework which I was willing to use was
&lt;a href=&#34;http://materializecss.com/&#34; target=&#34;_blank&#34;&gt;Materialize&lt;/a&gt;.
This framework is quite mature and has a lot components.
Far much more than I need. It has even
&lt;a href=&#34;https://github.com/InfomediaLtd/angular2-materialize&#34; target=&#34;_blank&#34;&gt;Angular 2 support&lt;/a&gt;.
But this support seems to me to be a bit immature.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getbootstrap.com/&#34; target=&#34;_blank&#34;&gt;Bootstrap&lt;/a&gt;
has also its own Material Design versions but
I am quite familiar with Bootstrap and
I wanted to learn something new that’s why I did not consider it.&lt;/p&gt;

&lt;p&gt;While researching, I looked at the Pluralsight course
&lt;a href=&#34;https://www.pluralsight.com/courses/angular-2-first-look&#34; target=&#34;_blank&#34;&gt;Angular 2: First Look&lt;/a&gt;
by &lt;a href=&#34;https://twitter.com/john_papa&#34; target=&#34;_blank&#34;&gt;John Papa&lt;/a&gt;.
He’s a great authority for me in all things client-side.
I found out in this course how he added Material Design to his application.
He used a library called
&lt;a href=&#34;https://www.getmdl.io/&#34; target=&#34;_blank&#34;&gt;Material Design Lite&lt;/a&gt;(MDL).
This library doesn’t rely on any JavaScript frameworks so I can use it in
Angular 2 without almost any trouble. But using this library has some drawbacks.
I will have to implement Angular 2 reusable components that will wrap MDL components.
I am okay with this because I want to learn a lot during the contest and this is
a perfect occasion to find out something more about Angular 2.
I’ll describe what I mean by creating wrappers around MDL components in my next post.&lt;/p&gt;

&lt;p&gt;Enough words let&amp;rsquo;s get to practice.&lt;/p&gt;

&lt;p&gt;To add MDL to my application, I issued &lt;code&gt;npm install material-design-lite --save&lt;/code&gt; in my terminal.
After a while, I had downloaded MDL to my &lt;em&gt;node_modules&lt;/em&gt; folder and it was also saved in
my &lt;em&gt;package.json&lt;/em&gt; file. Now I must copy the needed files to the &lt;em&gt;wwwroot&lt;/em&gt; as I did with the
Angular 2 files.
MDL requires two files. I added them to my config in &lt;em&gt;gulpfile.js&lt;/em&gt; so after it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var config = {
   libBase: &#39;node_modules&#39;,
   lib: [
       require.resolve(&#39;es6-shim/es6-shim.min.js&#39;),
       require.resolve(&#39;es6-shim/es6-shim.map&#39;),
       require.resolve(&#39;systemjs/dist/system-polyfills.js&#39;),
       require.resolve(&#39;systemjs/dist/system-polyfills.js.map&#39;),
       require.resolve(&#39;angular2/es6/dev/src/testing/shims_for_IE.js&#39;),
       require.resolve(&#39;systemjs/dist/system.src.js&#39;),
       require.resolve(&#39;angular2/bundles/angular2-polyfills.js&#39;),
       require.resolve(&#39;rxjs/bundles/Rx.js&#39;),
       require.resolve(&#39;angular2/bundles/angular2.dev.js&#39;),
       require.resolve(&#39;angular2/bundles/router.dev.js&#39;),
       require.resolve(&#39;angular2/bundles/http.dev.js&#39;),
       require.resolve(&#39;material-design-lite/dist/material.blue-teal.min.css&#39;),
       require.resolve(&#39;material-design-lite/material.min.js&#39;)
   ]
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I chose the color template blue-teal but there are a lot of other options.
You can even customize the color set by yourself on the
&lt;a href=&#34;https://www.getmdl.io/customize/index.html&#34; target=&#34;_blank&#34;&gt;MDL page&lt;/a&gt;. To copy these files to &lt;em&gt;wwwroot/lib&lt;/em&gt;
I executed &lt;code&gt;gulp build-dev&lt;/code&gt; in the terminal.
Then I added links to these files in &lt;em&gt;_Layou.cshtml&lt;/em&gt; so the head part of this file look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
        &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
        &amp;lt;title&amp;gt;Notifier&amp;lt;/title&amp;gt;
        &amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;
        
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://fonts.googleapis.com/icon?family=Material+Icons&amp;quot;&amp;gt;
        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;&amp;gt;
        &amp;lt;script src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see MDL also requires fonts which are included from googleapis.&lt;/p&gt;

&lt;p&gt;To see if my import succeeded, I changed my &lt;em&gt;app.component.ts&lt;/em&gt; so it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component} from &#39;angular2/core&#39;;
@Component({
   selector: &#39;notifier&#39;,
   template: `&amp;lt;div class=&amp;quot;mdl-layout mdl-js-layout mdl-layout--fixed-header&amp;quot;&amp;gt;
       &amp;lt;header class=&amp;quot;mdl-layout__header&amp;quot;&amp;gt;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&amp;lt;/header&amp;gt;
   &amp;lt;/div&amp;gt;`
})
export class AppComponent {
   title = &amp;quot;Notifier!!!&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And after recompilation of &lt;em&gt;.ts&lt;/em&gt; files (&lt;code&gt;npm run tsc&lt;/code&gt;), this is what I got:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/materialdesign/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may not see it in this post but I spent a lot of time doing research on what
CSS framework or library to choose. Finally, I will stick with Material Design Lite
but I am not 100% sure about my decision. I’ll be watching what’s going on in
the Angular 2 world and if something more attractive appears,
maybe I’ll change my decision. I hope that it won’t be too late.
Maybe someone will read this post and suggest a better choice to me. Anyway, in the next post
I’ll continue with MDL and I’ll explain what I mean by wrapping MDL components.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Project setup - client-side</title>
      <link>http://koscielniak.me/post/2016/03/project-setup-client-side/</link>
      <pubDate>Fri, 18 Mar 2016 08:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/project-setup-client-side/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not an easy task these days to set up a client-side application.
There is now an explosion of technologies. You should know all these: npm, Node.js, Grunt,
Gulp, Bower, Babel, ES2015, TypeScript, Less, Sass, Bootstrap, etc.
Yes, of course there are seeds which allow a startup project to be ready to
run but almost every one of them gives you something more than you need and
when you use this kind of seed you may not know what’s really going on
in the building process of your application.
The client-side part of my application will be based on Angular 2.
I decided to set up the Angular 2 application from scratch in order to
feel by myself what this process looks like, I’ll describe the process and what
I’ve learned in this post.&lt;/p&gt;

&lt;p&gt;I think the best place to start with something new is on its official page and so
I did this with the setup of the Angular 2 application. On this
&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;
I found all the necessary information needed to run my first
Angular 2 component on a startup page of my application,
but I must also adjust what’s on this official page to the
&lt;a href=&#34;https://get.asp.net/&#34; target=&#34;_blank&#34;&gt;ASP .NET Core&lt;/a&gt; reality.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/quickstart.html&#34; target=&#34;_blank&#34;&gt;5 Min Quickstart&lt;/a&gt;
on the Angular 2 official page gave a ready to use scaffolding for my application.
What I need to be aware of is that in ASP .NET Core,
the root folder of my site is &lt;em&gt;wwwroot&lt;/em&gt; and all static files should go into this folder.
I inserted &lt;em&gt;app.component.ts&lt;/em&gt; and &lt;em&gt;main.ts&lt;/em&gt; to the &lt;em&gt;wwwroot&lt;/em&gt; folder.
I changed the content of &lt;em&gt;app.component.ts&lt;/em&gt; a bit so it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component} from &#39;angular2/core&#39;;
@Component({
    selector: &#39;notifier&#39;,
    template: &#39;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&#39;
})
export class AppComponent { 
    title = &amp;quot;Notifier!!!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other files such as: &lt;em&gt;package.json&lt;/em&gt;, &lt;em&gt;tsconfig.json&lt;/em&gt; and &lt;em&gt;typing.json&lt;/em&gt;, I put under the root of my project.
I did a couple of changes in &lt;em&gt;project.json&lt;/em&gt; so it is listed below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;Notifier&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;scripts&amp;quot;: {   
    &amp;quot;tsc&amp;quot;: &amp;quot;tsc -w&amp;quot;,
    &amp;quot;typings&amp;quot;: &amp;quot;typings&amp;quot;,
    &amp;quot;postinstall&amp;quot;: &amp;quot;typings install&amp;quot;
  },
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;angular2&amp;quot;: &amp;quot;2.0.0-beta.9&amp;quot;,
    &amp;quot;systemjs&amp;quot;: &amp;quot;0.19.24&amp;quot;,
    &amp;quot;es6-promise&amp;quot;: &amp;quot;^3.0.2&amp;quot;,
    &amp;quot;es6-shim&amp;quot;: &amp;quot;^0.33.3&amp;quot;,
    &amp;quot;reflect-metadata&amp;quot;: &amp;quot;0.1.2&amp;quot;,
    &amp;quot;rxjs&amp;quot;: &amp;quot;5.0.0-beta.2&amp;quot;,
    &amp;quot;zone.js&amp;quot;: &amp;quot;0.5.15&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;del&amp;quot;: &amp;quot;^2.0.2&amp;quot;,
    &amp;quot;gulp&amp;quot;: &amp;quot;^3.9.0&amp;quot;,
    &amp;quot;typescript&amp;quot;: &amp;quot;^1.8.7&amp;quot;,
    &amp;quot;typings&amp;quot;:&amp;quot;^0.7.5&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I left &lt;em&gt;&amp;ldquo;dependencies&amp;rdquo;&lt;/em&gt; untouched but I changed &lt;em&gt;&amp;ldquo;devDependencies&amp;rdquo;&lt;/em&gt; quite a lot.
I don’t need live reload, so I removed this and I also added &lt;em&gt;del&lt;/em&gt; and &lt;em&gt;gulp&lt;/em&gt; which allowed me
to do some processing on application files. The most interesting things are in
the &lt;em&gt;&amp;ldquo;scripts&amp;rdquo;&lt;/em&gt; part of the &lt;em&gt;package.json&lt;/em&gt; file. I left only three commands and
two of them were unchanged, these are &lt;em&gt;typings&lt;/em&gt; and &lt;em&gt;postinstall&lt;/em&gt;.
These commands download typings for TypeScript to the root of your project right after
your &lt;em&gt;npm install&lt;/em&gt; command finishes their work. After this there’ll be a folder
named &lt;em&gt;typings&lt;/em&gt; in the root of the project. It’s wise to add this folder to &lt;em&gt;.gitignore&lt;/em&gt;.
The command &lt;em&gt;typings&lt;/em&gt; in this configuration works in the root of your project.
That’s why &lt;em&gt;typings.json&lt;/em&gt; is in this location and not in &lt;em&gt;wwwroot&lt;/em&gt;.
This file is a typings command configuration and it persists dependencies so that everyone on
the project can replicate it and that’s why you don’t need to commit &lt;em&gt;typings&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;Another command I changed a bit was &lt;em&gt;tsc&lt;/em&gt;, so when I run it my
TypeScript files will be watching for changes and compiled right after these changes happened.
This command looks for config in the location where it works.
It is the root of the project so again that’s why &lt;em&gt;tsconfig.json&lt;/em&gt; stays in
this place and not in the &lt;em&gt;wwwroot&lt;/em&gt;. This command creates &lt;em&gt;.js&lt;/em&gt; files and &lt;em&gt;.map&lt;/em&gt;
files just next to the original &lt;em&gt;.ts&lt;/em&gt; files, it is also a good practice to ignore
these &lt;em&gt;.js&lt;/em&gt; and &lt;em&gt;.map&lt;/em&gt; files in version control system. To do this I inserted these two lines to &lt;em&gt;.gitignore&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;src/web/wwwroot/app/**/*.js&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;src/web/wwwroot/app/**/*.map&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step was executing in terminal command &lt;code&gt;npm install&lt;/code&gt;.
Doing this allowed me to fetch all dependencies which are specified in &lt;em&gt;package.json&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I put my &lt;em&gt;package.json&lt;/em&gt; in the root of project so when I executed &lt;em&gt;npm install&lt;/em&gt; the &lt;em&gt;node_modules&lt;/em&gt;
folder was located in this location. We know that only the &lt;em&gt;wwwroot&lt;/em&gt; folder is visible
from the outside world. I needed a way to move files from &lt;em&gt;node_modules&lt;/em&gt; to the location somewhere
inside &lt;em&gt;wwwroot&lt;/em&gt;. I used task runner &lt;em&gt;gulp&lt;/em&gt; to move these files to the &lt;em&gt;lib&lt;/em&gt; folder inside the &lt;em&gt;wwwroot&lt;/em&gt;.
You may have noticed that I added a bunch of modules inside &lt;em&gt;&amp;ldquo;devDependencies&amp;rdquo;&lt;/em&gt; in &lt;em&gt;package.json&lt;/em&gt;,
these are needed for copying desired files to &lt;em&gt;wwwroot&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I added &lt;em&gt;gulpfile.js&lt;/em&gt; into the root of project and inside this file
I added some &lt;em&gt;gulp&lt;/em&gt; tasks so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;use strict&amp;quot;;

var path = require(&#39;path&#39;);
var gulp = require(&#39;gulp&#39;);
var del = require(&#39;del&#39;);

var webroot = &amp;quot;./wwwroot/&amp;quot;;

var config = {
    libBase: &#39;node_modules&#39;,
    lib: [
        require.resolve(&#39;es6-shim/es6-shim.min.js&#39;),
        require.resolve(&#39;es6-shim/es6-shim.map&#39;),
        require.resolve(&#39;systemjs/dist/system-polyfills.js&#39;),
        require.resolve(&#39;systemjs/dist/system-polyfills.js.map&#39;),
        require.resolve(&#39;angular2/es6/dev/src/testing/shims_for_IE.js&#39;),
        require.resolve(&#39;systemjs/dist/system.src.js&#39;),
        require.resolve(&#39;angular2/bundles/angular2-polyfills.js&#39;),
        require.resolve(&#39;rxjs/bundles/Rx.js&#39;),
        require.resolve(&#39;angular2/bundles/angular2.dev.js&#39;),
        require.resolve(&#39;angular2/bundles/router.dev.js&#39;),
        require.resolve(&#39;angular2/bundles/http.dev.js&#39;)
    ]
};

gulp.task(&#39;build.lib&#39;, [&#39;clean&#39;], function() {
    return gulp.src(config.lib, { base: config.libBase })
        .pipe(gulp.dest(webroot + &#39;lib&#39;));
});

gulp.task(&#39;build-dev&#39;, [&#39;build.lib&#39;], function() {

});
gulp.task(&#39;clean&#39;, function() {
    return del([webroot + &#39;lib&#39;]);
});

gulp.task(&#39;default&#39;, [&#39;build-dev&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may wonder why I bothered with all this stuff, shouldn’t I have used
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_Delivery_Network&#34; target=&#34;_blank&#34;&gt;CDN&lt;/a&gt; instead?
Yes, of course and for sure I’ll do this. However, for now
I chose the harder way to learn a bit more and gain knowledge on how
to setup a project when you cannot use CDN. At this stage,
I entered the command &lt;code&gt;gulp build-dev&lt;/code&gt; and inside &lt;em&gt;wwwroot&lt;/em&gt; a &lt;em&gt;lib&lt;/em&gt; folder was created
which contains specified libraries.
After this, my &lt;em&gt;wwwroot&lt;/em&gt; structure looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/wwwrootAfterSetup.png&#34; alt=&#34;wwwroot after setup&#34; title=&#34;wwwroot after setup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I can combine my Angular 2 with ASP .NET Core. To do this,
I need to create a couple of &lt;em&gt;.cshtml&lt;/em&gt; files inside the &lt;em&gt;Views&lt;/em&gt; folder.
Firstly, I must create this folder and then inside the &lt;em&gt;Views&lt;/em&gt; folder I created two more folders:
&lt;em&gt;Shared&lt;/em&gt; and &lt;em&gt;Home&lt;/em&gt;. Inside the &lt;em&gt;Shared&lt;/em&gt; folder I created a &lt;em&gt;_Layout.cshtml&lt;/em&gt; file and inside &lt;em&gt;Home&lt;/em&gt;
I created &lt;em&gt;Index.cshtml&lt;/em&gt;. Inside the &lt;em&gt;Views&lt;/em&gt; folder, I had to create another file:
&lt;em&gt;_ViewImports.cshtml&lt;/em&gt; which gives you the opportunity to provide some default usings for all views.
For now I left the &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; file empty.&lt;/p&gt;

&lt;p&gt;I created another file in &lt;em&gt;Views&lt;/em&gt; folder &lt;em&gt;_ViewStart.cshtml&lt;/em&gt;.
This file when placed into the &lt;em&gt;Views&lt;/em&gt; folder will influence all views in this folder hierarchy.
I used this file to specify the layout for all views.
Although I am going to have only one view. The content of my &lt;em&gt;_ViewStart.cshtml&lt;/em&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;@{
   Layout = &amp;quot;_Layout&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My &lt;em&gt;_Layout.cshtml&lt;/em&gt; at this stage looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
        &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
        &amp;lt;title&amp;gt;Notifier&amp;lt;/title&amp;gt;
        &amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        @RenderBody()
        @RenderSection(&amp;quot;scripts&amp;quot;, required: false)
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should pay attention to this element &lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;&lt;/code&gt;.
It is required by Angular 2 to tell the router how to compose navigation URLs.
You can read more about it
&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/router.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The file &lt;em&gt;Index.cshtml&lt;/em&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;notifier&amp;gt;
    Loading...
&amp;lt;/notifier&amp;gt;
@section scripts {

    &amp;lt;!-- 1. Load libraries --&amp;gt;
    &amp;lt;!-- IE required polyfills, in this exact order --&amp;gt;
     &amp;lt;script src=&amp;quot;lib/es6-shim/es6-shim.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/systemjs/dist/system-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/es6/dev/src/testing/shims_for_IE.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;   
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/angular2-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/rxjs/bundles/Rx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/angular2.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/router.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/http.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;


    &amp;lt;script&amp;gt;
        System.config({
            packages: {&#39;app&#39;: {defaultExtension: &#39;js&#39;}}
        });
        System.import(&#39;./app/main&#39;).catch(console.log.bind(console));
    &amp;lt;/script&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All I did here was to simply include all the files copied to the &lt;em&gt;wwwroot/lib&lt;/em&gt; folder and
I passed the configuration to
&lt;a href=&#34;https://github.com/systemjs/systemjs&#34; target=&#34;_blank&#34;&gt;System.js&lt;/a&gt;,
which is a module loader responsible for loading
the main file and other application files.&lt;/p&gt;

&lt;p&gt;I must of course add &lt;em&gt;HomeController&lt;/em&gt; which will return the &lt;em&gt;Index&lt;/em&gt; view.
It’s located in the &lt;em&gt;Controllers&lt;/em&gt; folder and its content are simply this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.AspNet.Mvc;

namespace Notifier.Web.Controllers
{
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all these steps my project structure looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/projectFoldersTree.png&#34; alt=&#34;Project folders tree&#34; title=&#34;Project folders tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I am almost done but before I run the application I have to do a couple of improvements
in my server-side setup which I didn’t need before. Firstly, I must setup
the default route for my application which will be &lt;em&gt;Home/Index&lt;/em&gt;.
I did this by adding two lines in method &lt;em&gt;Configure&lt;/em&gt; of &lt;em&gt;Startup&lt;/em&gt; class so now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseMvc(routes =&amp;gt;{
                routes.MapRoute(name:&amp;quot;default&amp;quot;, template: &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;);
                routes.MapRoute(&amp;quot;spa-fallback&amp;quot;,&amp;quot;{*anything}&amp;quot;,new{controller =&amp;quot;Home&amp;quot;, action=&amp;quot;Index&amp;quot;} );                
            });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;em&gt;&amp;ldquo;spa-fallback&amp;rdquo;&lt;/em&gt; route is in case of 404 requests.
It isn’t a perfect solution. I’ll show why and how to do it better in one of my future posts.
At this moment, you can run the application by issuing in terminal
&lt;code&gt;dnx web&lt;/code&gt; and you’ll see…an empty page&amp;hellip;do you know why?
Because at this moment my application does not serve static files.
You must add another middleware to allow the application to do this.
What’s more, you must even add another Nuget package which is called:
&lt;em&gt;Microsoft.AspNet.StaticFiles&lt;/em&gt;. I inserted this dependency in &lt;em&gt;project.json&lt;/em&gt;
and then instead of typing, I clicked the Restore button in Visual Studio Code.
After this I used this middleware by typing this line &lt;em&gt;app.UseStaticFiles()&lt;/em&gt;;
in &lt;em&gt;Configure&lt;/em&gt; method, so now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseStaticFiles();
            
            app.UseMvc(routes =&amp;gt;{
                routes.MapRoute(name:&amp;quot;default&amp;quot;, template: &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;);
                routes.MapRoute(&amp;quot;spa-fallback&amp;quot;,&amp;quot;{*anything}&amp;quot;,new{controller =&amp;quot;Home&amp;quot;, action=&amp;quot;Index&amp;quot;} );                
            });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, the order of middlewares is imported if you put this line:
&lt;em&gt;app.UseStaticFiles();&lt;/em&gt; after &lt;em&gt;UseMvc&lt;/em&gt; middleware your static files still won’t be served.&lt;/p&gt;

&lt;p&gt;Running the application now wouldn’t show anything fancy but only errors in the browser’s console,
I must compile TypeScript files. To do this I entered &lt;code&gt;npm run tsc&lt;/code&gt; and now &lt;em&gt;.js&lt;/em&gt;
files are created and this tool is watching for any changes and recompiles files
almost immediately when these changes happen. After this, I expected something more
attractive and I was right. This is what I got:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you would like to repeat my steps, for sure you will encounter some errors and
you won’t see them until you add another package called: &lt;em&gt;Microsoft.AspNet.Diagnostics&lt;/em&gt;
and in &lt;em&gt;Configure&lt;/em&gt; method you use middleware &lt;em&gt;UseDeveloperExceptionPage&lt;/em&gt;.
After this, when an error happens you’ll see a very nice error page.
You should add this as the first middleware and remember about &lt;em&gt;dnx restore&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I haven’t finished my set-up yet but I think that this post is already long enough. In my next few posts,
I will talk about how I added styling to my application and how I improved this set-up a bit.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Project setup - server-side</title>
      <link>http://koscielniak.me/post/2016/03/project-setup-server-side/</link>
      <pubDate>Wed, 16 Mar 2016 08:45:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/project-setup-server-side/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I am writing about how I set up the server-side of my project - Notifier.
The application will consist of REST API and Angular 2 single page application.
For now, both parts will be hosted in the same ASP .NET Core application.
To create this project I used yo aspnet generator.
If you want to find out how I installed these tools check out
&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;this post&lt;/a&gt;.
I entered in terminal command &lt;code&gt;yo aspnet&lt;/code&gt; and after this I saw the following output,
which gave me a choice of project type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/emptyApplication.png&#34; alt=&#34;What type of application do you want to create?&#34; title=&#34;What type of application do you want to create?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose empty project.&lt;/p&gt;

&lt;p&gt;After this I was asked to enter the project name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/appName.png&#34; alt=&#34;What&#39;s the name of your ASP.NET application?&#34; title=&#34;What&#39;s the name of your ASP.NET application?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I typed &lt;em&gt;Web&lt;/em&gt;. This name has an influence on the name of the folder which will be created when you hit enter.
For the rest of this article this newly created folder will be referred to as the root of the project.
When I opened this project in Visual Studio Code I could see the following structure of my project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/emptyTree.png&#34; alt=&#34;Structure of empty project&#34; title=&#34;Structure of empty project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To be able to use Web API in my project I must import the following nuget package:
&lt;em&gt;Microsoft.AspNet.Mvc&lt;/em&gt;
I did this by typing its name in project.json under the dependencies section.
When you do this you can see a very nice intellisense which helps to choose the right package
in right version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/intelliSenseNuget.png&#34; alt=&#34;Intellisense in project.json&#34; title=&#34;Intellisense in project.json&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After this is what my dependency section looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;dependencies&amp;quot;: {
     &amp;quot;Microsoft.AspNet.IISPlatformHandler&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
     &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
     &amp;quot;Microsoft.AspNet.Mvc&amp;quot;: &amp;quot;6.0.0-rc1-final&amp;quot;
   }, 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing which I did was issuing in terminal the command &lt;code&gt;dnu restore&lt;/code&gt;.
I must be in the root folder of the project to issue this command. Actually,
Visual Studio Code shows at the top a strip with the button Restore which does exactly the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/restoreButton.png&#34; alt=&#34;Restore button in VS Code&#34; title=&#34;Restore button in VS Code&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I changed my Startup file so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNet.Builder;
using Microsoft.Extensions.DependencyInjection;

namespace Notifier.Web
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {            
            services.AddMvc();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseMvc();
        }

        // Entry point for the application.
        public static void Main(string[] args) =&amp;gt; Microsoft.AspNet.Hosting.WebApplication.Run&amp;lt;Startup&amp;gt;(args);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added &lt;code&gt;services.AddMvc();&lt;/code&gt; in &lt;code&gt;ConfigureServices&lt;/code&gt; method and &lt;code&gt;app.UseMvc();&lt;/code&gt; in &lt;code&gt;Configure&lt;/code&gt; method.
At the occasion, I also hit CTRL+. And chose &lt;em&gt;Remove Unnecessary Usings&lt;/em&gt; which did what it says.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/removeUnnecessary.png&#34; alt=&#34;Removing unnecessary usings&#34; title=&#34;Removing unnecessary usings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may not know but MVC and Web API are now unified in ASP.NET Core 1.0.
There&amp;rsquo;s no need to import something special for Web API.
Then it was time to create first the WebApi controller.
Inside the root of my project I created a folder Controllers (&lt;code&gt;mkdir Controllers&lt;/code&gt;),
and my goal was to create a dummy API controller inside it.
I achieved my goal using &lt;code&gt;yo aspnet generator&lt;/code&gt;.
Firstly, I navigated to the newly created Controllers folder and then
I used the command &lt;code&gt;yo aspnet --help&lt;/code&gt; in it. That command showed me how
I can create a WebApi controller.
It turned out that there is command &lt;code&gt;yo aspnet:WebApiController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/yoaspnetHelp.png&#34; alt=&#34;yo aspnet --help&#34; title=&#34;yo aspnet --help&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I executed it in terminal passing &lt;em&gt;ValuesController&lt;/em&gt; as the name of my controller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet:WebApiController ValuesController
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command added file ValuesController.cs inside my Controllers folder.&lt;/p&gt;

&lt;p&gt;And inside this file was the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNet.Mvc;

// For more information on enabling Web API for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860

namespace notifier.Controllers
{
    [Route(&amp;quot;api/[controller]&amp;quot;)]
    public class ValuesController : Controller
    {
        // GET: api/values
        [HttpGet]
        public IEnumerable&amp;lt;string&amp;gt; Get()
        {
            return new string[] { &amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot; };
        }

        // GET api/values/5
        [HttpGet(&amp;quot;{id}&amp;quot;)]
        public string Get(int id)
        {
            return &amp;quot;value&amp;quot;;
        }

        // POST api/values
        [HttpPost]
        public void Post([FromBody]string value)
        {
        }

        // PUT api/values/5
        [HttpPut(&amp;quot;{id}&amp;quot;)]
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE api/values/5
        [HttpDelete(&amp;quot;{id}&amp;quot;)]
        public void Delete(int id)
        {
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should not typed extension &lt;em&gt;.cs&lt;/em&gt;. Generator adds this for you.&lt;/p&gt;

&lt;p&gt;That was enough for me to test that I had the server side part of my application already working.
To be sure about it, I had to run my application. I entered in terminal the command &lt;code&gt;cd ..&lt;/code&gt; because
I was still in the Controllers folder and you can start your application only from a root
folder of your project and in this root folder I issued the command &lt;code&gt;dnx web&lt;/code&gt; and
I got the following output in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hosting environment: Production
Now listening on: http://localhost:5000
Application started. Press Ctrl+C to shut down
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seemed that everything was okay. This is how it looked when
I did a get request under url &lt;a href=&#34;http://localhost:5000/api/values&#34;&gt;http://localhost:5000/api/values&lt;/a&gt; using
&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/valuesFromController.png&#34; alt=&#34;Values from controller in Postman&#34; title=&#34;Values from controller in Postman&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;dnx web&lt;/code&gt; command does you can check in the file project.json in the section commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; &amp;quot;commands&amp;quot;: {
    &amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see web is an alias for &lt;em&gt;Microsoft.AspNet.Server.Kestrel&lt;/em&gt;.
This is a cross platform server which is used to run ASP .NET Core applications.
I’ll write more about ASP .NET Core during my series,
but for now the setup of my Project’s server side is finished.&lt;/p&gt;

&lt;p&gt;Yes, there’ll be more things to set up in the future but for now I don’t need them as
I am happy with everything I have now. Now I can start to set up my client-side.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first ASP NET Core 1.0 web application</title>
      <link>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</link>
      <pubDate>Wed, 09 Mar 2016 15:00:39 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I will discuss how I tested my Ubuntu 14.04 if it is ready
for creating the ASP .NET Core 1.0 application.
I wrote &lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;here&lt;/a&gt;
about how I configured my Ubuntu 14.04 to create ASP .NET Core 1.0 apps.
So, let’s start with the first application.&lt;/p&gt;

&lt;p&gt;First, what I did was entering in the terminal the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I saw what I could do with Yeoman aspnet generator.
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnethelp.png&#34; alt=&#34;yo aspnet --help&#34; title=&#34;yo aspnet --help&#34; /&gt;
As it turned out this generator can be helpful not only with aspnet stuff but also with javascript, typescript,
application configuration or even with a Dockerfile.&lt;/p&gt;

&lt;p&gt;However, to start, I had to create an application first so I entered the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw this:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnet.png&#34; alt=&#34;yo aspnet&#34; title=&#34;yo aspnet&#34; /&gt;
I chose Web Application from the menu and I named it “WebApplication”.
Then I changed the directory to the newly created application directory called, unsurprisingly WebApplication
(&lt;code&gt;cd WebApplication&lt;/code&gt;) and then I issued:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm use 1.0.0-rc1-update1 -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which changed the framework version to coreclr in default was mono. I wanted to try this on coreclr, first.
Then, inside &amp;ldquo;WebApplication&amp;rdquo; directory I wrote the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which caused all the nuget packages to begin installing.&lt;/p&gt;

&lt;p&gt;I took a while to get all the packages but finally everything was downloaded, installed and ready to run.
Then I ran the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally in the browser under the url &lt;code&gt;http://localhost:5000&lt;/code&gt;
I could see this beautiful startup page:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/startupPage.png&#34; alt=&#34;ASP .NET Core 1.0 Startup page&#34; title=&#34;ASP .NET Core 1.0 Startup page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was an exciting process to install all these things and finally run the first application.
Two things astonished me the most during this, firstly, that the whole process of installing
all this stuff and running the application went gently and smoothly although rather lengthily.
I expected something more challenging but…good job to all of the teams.
Secondly, there were a large number of packages installed after issuing the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were 257 packages
&lt;img src=&#34;http://koscielniak.me/post/2016/03/dnuRestore.png&#34; alt=&#34;dnu restore&#34; title=&#34;dnu restore&#34; /&gt;
I knew about bigger granularity and modularity of ASP .NET Core 1.0,
but this number was a bit surprising for me. All these packages are cached in directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/.dnx/packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So next time when you issue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will be far quicker to get these installed.
And if for some reason you want to clear your packages cache, it’s as simple as emptying this folder.
I hadn’t even opened Visual Studio Code yet but I know that the whole environment is set-up correctly.&lt;/p&gt;

&lt;p&gt;Realy? Not exactly found out, when I accessed routes required connection to database,
that not everything was setup correctly. As it turned out default Web Application project created by
yo asp-net generator uses SQLite as database you can see in code below which is in class Startup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddEntityFramework()
        .AddSqlite()
        .AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt;
            options.UseSqlite(Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;]));
    //…
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the connection string is defined in method Startup of class Startup and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;] = $@&amp;quot;Data Source={appEnv.ApplicationBasePath}/WebApplication.db&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I tried access database I got following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;System.DllNotFoundException: Unable to load DLL &#39;sqlite3&#39;: The specified module could not be found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was due that I didn’t install SQLite.
To install SQLite I issued command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then everything was ok.
But how I saw that error. By default application started in production mode. In this mode you cannot see a full error’s list.
To see it you must run application in Development mode. I simple ran application with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw full list of exceptions and found what was wrong.
Now I can start create my project.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing ASP .NET Core 1.0 on Ubuntu 14.04</title>
      <link>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</link>
      <pubDate>Tue, 08 Mar 2016 22:00:29 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After my last impromptu post &lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;about Project Rider&lt;/a&gt;,
I’m finally writing about the setup of my
Linux environment for ASP .NET Core 1.0. I mentioned that I am going to play with ASP .NET Core 1.0 on
Ubuntu 14.04 but for sure I’ll also play with it on Windows. However, in this post I will describe
how I installed ASP .NET Core 1.0 on Ubuntu 14.04. I am not writing about how to install
Ubuntu 14.04 itself, as it’s not the place and time to write about this.&lt;/p&gt;

&lt;p&gt;My starting point for this process was on the official
&lt;a href=&#34;https://docs.asp.net/en/latest/getting-started/installing-on-linux.html&#34;&gt;asp.net page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I opened terminal (CTRL+SHIFT+T) and executed all the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install unzip curl  
curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh &amp;amp;&amp;amp; source ~/.dnx/dnvm/dnvm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I installed all the prerequisites for the DNX by issuing this line in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libunwind8 gettext libssl-dev libcurl4-openssl-dev zlib1g libicu-dev uuid-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed DNX for .NET Core. issuing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the commands executed smoothly and without errors.&lt;/p&gt;

&lt;p&gt;I also installed Mono. Firstly, I added the package repository to my system
by executing this in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF 
 echo &amp;quot;deb http://download.mono-project.com/repo/debian wheezy main&amp;quot; | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
 sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed three mono packages with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mono-devel mono-complete ca-certificates-mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I used the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to install DNX for mono.&lt;/p&gt;

&lt;p&gt;There is also one piece of the puzzle needed. To be able to run the application in server Kestrel I had to install &lt;em&gt;libuv&lt;/em&gt;.
I did this by issuing the following commands in shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install make automake libtool curl
curl -sSL https://github.com/libuv/libuv/archive/v1.8.0.tar.gz | sudo tar zxfv - -C /usr/local/src
cd /usr/local/src/libuv-1.8.0
sudo sh autogen.sh
sudo ./configure
sudo make
sudo make install
sudo rm -rf /usr/local/src/libuv-1.8.0 &amp;amp;&amp;amp; cd ~/
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I also added these two lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source dnvm.sh
export MONO_MANAGED_WATCHER=disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to my &lt;em&gt;~/.bash_profile&lt;/em&gt; file to ensure that I can always run the dnvm and dnu commands and
to work around a known bug in Mono.
You can find more information &lt;a href=&#34;https://code.visualstudio.com/Docs/runtimes/ASPnet5&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having set up DNVM, and getting DNX done, I could now install the Visual Studio Code.
I’ve always wanted to try Visual Studio Code. I haven’t had the occasion
to do this until now. However, having access to the EAP version of Project Rider,
I am only waiting for better support of ASP .NET Core application in it and
I’ll give up Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Installing Visual Studio Code was a piece of cake. I only downloaded the zip file from this
&lt;a href=&#34;https://code.visualstudio.com/docs?dv=linux64&#34;&gt;page&lt;/a&gt; and then I unzipped it
in a location that was convenient
for me, and inside the folder where I unzipped the VS Code I had an executable file named Code.
Double clicking on it launches the VS Code.&lt;/p&gt;

&lt;p&gt;To create the first ASP .NET Core 1.0 application I also needed &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;
and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;. Yes, it’s true that nothing works these days without Node.js. Node.js and npm
are required to install and run &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt;, &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;
and other massive amounts of Node.js packages.&lt;/p&gt;

&lt;p&gt;To install Node.js I use a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;Node Version Manager&lt;/a&gt;.
I did this by issuing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installing nvm, I installed the recent version of Node.js which is 5.5.0, the issuing command was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install v5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I set it to the currently used version with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm use 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally I aliased it as the default version so that this version of Node could be used in any new shell.
I did this using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvm alias default 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I installed Yoeman then aspnet generator for Yoeman and finally Gulp and Bower.
This line executed in the terminal did the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; npm install -g yo generator-aspnet gulp bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All these steps with Node.js are required in order to have a nice generator
which helps you with the setup of
ASP .NET projects (&lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; project also) and with other things,
for example, adding a new controller or view. However, I’ll write about this in the
&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I&#39;m holding a Project Rider EAP</title>
      <link>http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/</link>
      <pubDate>Wed, 02 Mar 2016 22:21:06 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I planned for the next post in the “Daj się poznać” series to be about my Ubuntu environment setup
but something pretty amazing happened to me yesterday evening -
I got access to an EAP of Project Rider. So this is an impromptu post which fits
very well into the “Daj się poznać” series and the post which
I had planned about my Ubuntu environment setup will follow next week.&lt;/p&gt;

&lt;p&gt;I had hoped to get access to an EAP version of Project Rider and
it happened yesterday at about 9pm when I opened my mailbox and saw an email from JetBrains.
I received links to download Project Rider. I felt like a child who just got a gift from Santa Claus.
I’ve wanted to have IDE for .NET from JetBrains for so long, I can’t even remember the first time
the idea crossed my mind.
I am using ReSharper but it’s not the same and I wanted to have a “native feeling” of JetBrains’ IDEs.
Let’s look at my first impression about Project Rider.&lt;/p&gt;

&lt;p&gt;I chose install rider on Ubuntu so I downloaded the version for Linux.
I unpacked the downloaded archive into a convenient location. I opened console (CTRL+SHIFT+T) and then I typed in console&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/install/riderRS-144.4571/bin/rider.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a short while I saw this window&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/riderSettingsPrompt.png&#34; alt=&#34;Project Rider import settings&#34; title=&#34;Project Rider import settings&#34; /&gt;
I chose not to import my settings. And the process of customizing the Rider began.&lt;/p&gt;

&lt;p&gt;On the first screen I selected a UI theme.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/uiTheme.png&#34; alt=&#34;Project Rider select UI Theme&#34; title=&#34;Project Rider select UI Theme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The next window prompted me to select a keymap. Because I am really familiar with shortcuts from
Intellij IDEA I chose this keymap. By the way, I was pleasantly surprised that
the Visual Studio Keymap was a choice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/keymapChoice.png&#34; alt=&#34;Project Rider select Keymap&#34; title=&#34;Project Rider select Keymap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the next screen I was asked to choose whether I want to have a desktop entry for Project Rider or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/desktopEntry.png&#34; alt=&#34;Project Rider desktop entry&#34; title=&#34;Project Rider desktop entry&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I could decide whether I wanted to have a Launcher Script and where it should be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/launcherScript.png&#34; alt=&#34;Project Rider Launcher Script&#34; title=&#34;Project Rider Launcher Script&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the next window&lt;/p&gt;

&lt;p&gt;I found a couple of useful links to
&lt;a href=&#34;https://www.jetbrains.com/rider/documentation/&#34; target=&#34;_blank&#34;&gt;Getting Started help&lt;/a&gt;,
to &lt;a href=&#34;https://youtrack.jetbrains.com/issues/RIDER&#34; target=&#34;_blank&#34;&gt;Rider Issue Tracker&lt;/a&gt;
and to &lt;a href=&#34;https://jbsrider.zendesk.com/hc/en-us&#34; target=&#34;_blank&#34;&gt;Known Issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/riderLinks.png&#34; alt=&#34;Project Rider EAP&#34; title=&#34;Project Rider EAP&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After I clicked &lt;em&gt;Start using Rider&lt;/em&gt;, I was prompted to insert my password in a dialog window and
then I saw the Welcome screen of Rider&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/welcomeScreen.png&#34; alt=&#34;Project Rider Welcome Screen&#34; title=&#34;Project Rider Welcome Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may wonder what this yellow strip at the bottom means. You can read about it in this
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-78860&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.
It’s a known issue in JetBrains products on Ubuntu and how to deal with it is also written in this link.&lt;/p&gt;

&lt;p&gt;I must honestly say that everything was okay during the installation and this was a  big plus.&lt;/p&gt;

&lt;p&gt;After installation, I quickly created my first console application:
I clicked &lt;em&gt;New Project&lt;/em&gt;  on Welcome screen and I saw this window&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/newProject.png&#34; alt=&#34;Project Rider New Project&#34; title=&#34;Project Rider New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose &lt;em&gt;Console Application&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On the next screen I entered the project name and solution name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/newProjectProjectName.png&#34; alt=&#34;Project Rider Project Name&#34; title=&#34;Project Rider Project Name&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After this, I wrote some code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;

namespace ConsoleApplication
{
  class Program
  {
    static void Main(string[] args)
    {
      Console.WriteLine(&amp;quot;Is it real?&amp;quot;);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and pressed SHIFT+F10 and can you guess what happened?
At the bottom of IDE I saw this output&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/firstProgramOutput.png&#34; alt=&#34;Project Rider First Program Output&#34; title=&#34;Project Rider First Program Output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So until now everything was perfect. I started playing with a web project and this time it wasn’t so good.
There is no template to create this type of project.
I created one using Yeoman aspnet generator (I’ll write about this in a future post).
But I couldn’t open it in Project Rider because the project created by this generator
doesn’t contain .sln and .csproj files and apparently
Rider requires these type of files in order to see files in solution.
I created an issue about this in JetBrains youtrack and you can follow it at this
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/RIDER-470&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found out in this
&lt;a href=&#34;https://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;
that CoreCLR support is coming so I must be patient. I hope that Rider will have better support for ASP
.NET Core applications because now it doesn’t have this. Currently, it doesn’t even support Views.
I created another issue about this. You can check it
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/RIDER-467&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, I am so happy and excited that JetBrains created Rider but
I must wait for a while until it gets better support for CoreCLR and ASP .NET Core.
During this time, I’ll be using Visual Studio Code on Linux and Visual Studio with ReSharper on Windows.
Again, great job to JetBrains! I am sure that I’m not the only one waiting for more.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>&#34;Daj się poznać&#34; - Project details</title>
      <link>http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/</link>
      <pubDate>Tue, 01 Mar 2016 10:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first post in the series “Daj się poznać”.
I am going to mention the details of the project which I’ll be working on during the contest.
I am going to create a simple yet powerful application which will allow me to add some events
and notify me about them at a specific time via a specified medium.
For starters, I am planing to implement sms and email notification but maybe in the future
I’ll add the ability to send notifications to some IoT device.&lt;/p&gt;

&lt;p&gt;I am going to implement this application in a way which allows me to upgrade ASP .NET Core 1.0
framework very quickly. This framework is brand new and it’s quite probable that some breaking
changes will appear in the next release. So I cannot depend on it very much.
I hope that ASP .NET Core 1.0 will have a lot of versions in the future but
I don’t want to have a nightmare during upgrading to a newer version. Therefore,
I must use architecture which prepares me for this. I don’t know exactly what this architecture
will look like but I’ll write about it in future posts as the project will continue.&lt;/p&gt;

&lt;p&gt;To implement my project I need some sort of membership system for cases like these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user can sign in&lt;/li&gt;
&lt;li&gt;user can sign up (I am not sure)&lt;/li&gt;
&lt;li&gt;user can sign out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other use cases which I am going to implement are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user can create event&lt;/li&gt;
&lt;li&gt;user can add notification to event&lt;/li&gt;
&lt;li&gt;user can add related persons to event&lt;/li&gt;
&lt;li&gt;user can see list of events&lt;/li&gt;
&lt;li&gt;user can delete event&lt;/li&gt;
&lt;li&gt;user can change event&lt;/li&gt;
&lt;li&gt;sending notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll write more details about use cases and their implementation in future posts, but before I do this, I’ll write something about installation ASP .NET Core 1.0 on Ubuntu 14.04 and running the first web application in this operating system.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Enrolling in &#34;Daj się poznać&#34;</title>
      <link>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</link>
      <pubDate>Sun, 14 Feb 2016 13:27:14 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, Maciej Aniserowicz wrote on his blog about starting the second edition of the
&lt;a href=&#34;http://www.maciejaniserowicz.com/daj-sie-poznac/&#34;&gt;“Daj się poznać”&lt;/a&gt;
competition. I’ve decided to take part in this challenge.
I started my blog over three weeks ago and since then I have made two posts.
I think that taking part in this contest will encourage me to have a more systematic approach to my blog.
I think this contest will be a lot of fun and provide a lot of opportunities for me to learn new things.
For the competition I am required to write an average of two articles a week for three months (minimum 10 weeks),
and this seems like a big deal to me.&lt;/p&gt;

&lt;p&gt;The contest will run from March to May and the winners will be announced in June.
Writing a blog is only one part of this undertaking, the other is completing a project and all blog posts must be
related to this project. I haven’t decided what my project will be but I have the whole of February to brainstorm.
I know that I want to learn and try some new technologies, for example, &lt;a href=&#34;https://get.asp.net/&#34;&gt;ASP .NET Core 1&lt;/a&gt;,
&lt;a href=&#34;https://angular.io/&#34;&gt;Angular 2&lt;/a&gt;, and this project will be a good occasion to do this.
Maybe I will also try to use &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;,
&lt;a href=&#34;https://azure.microsoft.com&#34;&gt;Azure&lt;/a&gt; or another cloud computing platform.
We’ll see, but for sure I want to gain a lot experience from this project.
Additionally, I am going to do this project on Ubuntu 14.04.
ASP .NET Core 1 is a cross-platform framework and I am going to try it out on environments other than Windows.&lt;/p&gt;

&lt;p&gt;As you can see, I’ll be treating this competition as source for many challenges: experiencing new technologies,
regular blogging, and systematic work on my “side project”.
Everything that I am going to use is currently in the Beta stage, so this is another challenge for me.
We will see what happens in June. I hope this will be great fun and that I will have a lot of great experiences,
so&amp;hellip;let’s do it!&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;
















&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/publishing-to-azure/&#34;&gt;Publishing to Azure&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/setting-up-the-web-client-for-google-identity-platform/&#34;&gt;Setting up the Web client for Google Identity Platform&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-1/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/04/oidc-token-manager-library-with-google-identity-platform-part-2/&#34;&gt;oidc-token-manager library with Google Identity Platform - Part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
  </channel>
</rss>