<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Daj Się Poznać on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/daj-si%C4%99-pozna%C4%87/</link>
    <description>Recent content in Daj Się Poznać on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Mar 2016 08:45:00 +0100</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/daj-si%C4%99-pozna%C4%87/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Project setup - server-side</title>
      <link>http://koscielniak.me/post/2016/03/project-setup-server-side/</link>
      <pubDate>Wed, 16 Mar 2016 08:45:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/project-setup-server-side/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I am writing about how I set up the server-side of my project - Notifier.
The application will consist of REST API and Angular 2 single page application.
For now, both parts will be hosted in the same ASP .NET Core application.
To create this project I used yo aspnet generator.
If you want to find out how I installed these tools check out
&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;this post&lt;/a&gt;.
I entered in terminal command &lt;code&gt;yo aspnet&lt;/code&gt; and after this I saw the following output,
which gave me a choice of project type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/emptyApplication.png&#34; alt=&#34;What type of application do you want to create?&#34; title=&#34;What type of application do you want to create?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose empty project.&lt;/p&gt;

&lt;p&gt;After this I was asked to enter the project name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/appName.png&#34; alt=&#34;What&#39;s the name of your ASP.NET application?&#34; title=&#34;What&#39;s the name of your ASP.NET application?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I typed &lt;em&gt;Web&lt;/em&gt;. This name has an influence on the name of the folder which will be created when you hit enter.
For the rest of this article this newly created folder will be referred to as the root of the project.
When I opened this project in Visual Studio Code I could see the following structure of my project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/emptyTree.png&#34; alt=&#34;Structure of empty project&#34; title=&#34;Structure of empty project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To be able to use Web API in my project I must import the following nuget package:
&lt;em&gt;Microsoft.AspNet.Mvc&lt;/em&gt;
I did this by typing its name in project.json under the dependencies section.
When you do this you can see a very nice intellisense which helps to choose the right package
in right version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/intelliSenseNuget.png&#34; alt=&#34;Intellisense in project.json&#34; title=&#34;Intellisense in project.json&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After this is what my dependency section looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;dependencies&amp;quot;: {
     &amp;quot;Microsoft.AspNet.IISPlatformHandler&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
     &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
     &amp;quot;Microsoft.AspNet.Mvc&amp;quot;: &amp;quot;6.0.0-rc1-final&amp;quot;
   }, 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing which I did was issuing in terminal the command &lt;code&gt;dnu restore&lt;/code&gt;.
I must be in the root folder of the project to issue this command. Actually,
Visual Studio Code shows at the top a strip with the button Restore which does exactly the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/restoreButton.png&#34; alt=&#34;Restore button in VS Code&#34; title=&#34;Restore button in VS Code&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I changed my Startup file so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNet.Builder;
using Microsoft.Extensions.DependencyInjection;

namespace Notifier.Web
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {            
            services.AddMvc();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseMvc();
        }

        // Entry point for the application.
        public static void Main(string[] args) =&amp;gt; Microsoft.AspNet.Hosting.WebApplication.Run&amp;lt;Startup&amp;gt;(args);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added &lt;code&gt;services.AddMvc();&lt;/code&gt; in &lt;code&gt;ConfigureServices&lt;/code&gt; method and &lt;code&gt;app.UseMvc();&lt;/code&gt; in &lt;code&gt;Configure&lt;/code&gt; method.
At the occasion, I also hit CTRL+. And chose &lt;em&gt;Remove Unnecessary Usings&lt;/em&gt; which did what it says.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/removeUnnecessary.png&#34; alt=&#34;Removing unnecessary usings&#34; title=&#34;Removing unnecessary usings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may not know but MVC and Web API are now unified in ASP.NET Core 1.0.
There&amp;rsquo;s no need to import something special for Web API.
Then it was time to create first the WebApi controller.
Inside the root of my project I created a folder Controllers (&lt;code&gt;mkdir Controllers&lt;/code&gt;),
and my goal was to create a dummy API controller inside it.
I achieved my goal using &lt;code&gt;yo aspnet generator&lt;/code&gt;.
Firstly, I navigated to the newly created Controllers folder and then
I used the command &lt;code&gt;yo aspnet --help&lt;/code&gt; in it. That command showed me how
I can create a WebApi controller.
It turned out that there is command &lt;code&gt;yo aspnet:WebApiController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/yoaspnetHelp.png&#34; alt=&#34;yo aspnet --help&#34; title=&#34;yo aspnet --help&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I executed it in terminal passing &lt;em&gt;ValuesController&lt;/em&gt; as the name of my controller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet:WebApiController ValuesController
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command added file ValuesController.cs inside my Controllers folder.&lt;/p&gt;

&lt;p&gt;And inside this file was the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNet.Mvc;

// For more information on enabling Web API for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860

namespace notifier.Controllers
{
    [Route(&amp;quot;api/[controller]&amp;quot;)]
    public class ValuesController : Controller
    {
        // GET: api/values
        [HttpGet]
        public IEnumerable&amp;lt;string&amp;gt; Get()
        {
            return new string[] { &amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot; };
        }

        // GET api/values/5
        [HttpGet(&amp;quot;{id}&amp;quot;)]
        public string Get(int id)
        {
            return &amp;quot;value&amp;quot;;
        }

        // POST api/values
        [HttpPost]
        public void Post([FromBody]string value)
        {
        }

        // PUT api/values/5
        [HttpPut(&amp;quot;{id}&amp;quot;)]
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE api/values/5
        [HttpDelete(&amp;quot;{id}&amp;quot;)]
        public void Delete(int id)
        {
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should not typed extension &lt;em&gt;.cs&lt;/em&gt;. Generator adds this for you.&lt;/p&gt;

&lt;p&gt;That was enough for me to test that I had the server side part of my application already working.
To be sure about it, I had to run my application. I entered in terminal the command &lt;code&gt;cd ..&lt;/code&gt; because
I was still in the Controllers folder and you can start your application only from a root
folder of your project and in this root folder I issued the command &lt;code&gt;dnx web&lt;/code&gt; and
I got the following output in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hosting environment: Production
Now listening on: http://localhost:5000
Application started. Press Ctrl+C to shut down
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seemed that everything was okay. This is how it looked when
I did a get request under url &lt;a href=&#34;http://localhost:5000/api/values&#34;&gt;http://localhost:5000/api/values&lt;/a&gt; using
&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/valuesFromController.png&#34; alt=&#34;Values from controller in Postman&#34; title=&#34;Values from controller in Postman&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;dnx web&lt;/code&gt; command does you can check in the file project.json in the section commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; &amp;quot;commands&amp;quot;: {
    &amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see web is an alias for &lt;em&gt;Microsoft.AspNet.Server.Kestrel&lt;/em&gt;.
This is a cross platform server which is used to run ASP .NET Core applications.
I’ll write more about ASP .NET Core during my series,
but for now the setup of my Project’s server side is finished.&lt;/p&gt;

&lt;p&gt;Yes, there’ll be more things to set up in the future but for now I don’t need them as
I am happy with everything I have now. Now I can start to set up my client-side.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;







&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first ASP NET Core 1.0 web application</title>
      <link>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</link>
      <pubDate>Wed, 09 Mar 2016 15:00:39 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I will discuss how I tested my Ubuntu 14.04 if it is ready
for creating the ASP .NET Core 1.0 application.
I wrote &lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;here&lt;/a&gt;
about how I configured my Ubuntu 14.04 to create ASP .NET Core 1.0 apps.
So, let’s start with the first application.&lt;/p&gt;

&lt;p&gt;First, what I did was entering in the terminal the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I saw what I could do with Yeoman aspnet generator.
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnethelp.png&#34; alt=&#34;yo aspnet --help&#34; title=&#34;yo aspnet --help&#34; /&gt;
As it turned out this generator can be helpful not only with aspnet stuff but also with javascript, typescript,
application configuration or even with a Dockerfile.&lt;/p&gt;

&lt;p&gt;However, to start, I had to create an application first so I entered the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw this:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnet.png&#34; alt=&#34;yo aspnet&#34; title=&#34;yo aspnet&#34; /&gt;
I chose Web Application from the menu and I named it “WebApplication”.
Then I changed the directory to the newly created application directory called, unsurprisingly WebApplication
(&lt;code&gt;cd WebApplication&lt;/code&gt;) and then I issued:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm use 1.0.0-rc1-update1 -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which changed the framework version to coreclr in default was mono. I wanted to try this on coreclr, first.
Then, inside &amp;ldquo;WebApplication&amp;rdquo; directory I wrote the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which caused all the nuget packages to begin installing.&lt;/p&gt;

&lt;p&gt;I took a while to get all the packages but finally everything was downloaded, installed and ready to run.
Then I ran the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally in the browser under the url &lt;code&gt;http://localhost:5000&lt;/code&gt;
I could see this beautiful startup page:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/startupPage.png&#34; alt=&#34;ASP .NET Core 1.0 Startup page&#34; title=&#34;ASP .NET Core 1.0 Startup page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was an exciting process to install all these things and finally run the first application.
Two things astonished me the most during this, firstly, that the whole process of installing
all this stuff and running the application went gently and smoothly although rather lengthily.
I expected something more challenging but…good job to all of the teams.
Secondly, there were a large number of packages installed after issuing the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were 257 packages
&lt;img src=&#34;http://koscielniak.me/post/2016/03/dnuRestore.png&#34; alt=&#34;dnu restore&#34; title=&#34;dnu restore&#34; /&gt;
I knew about bigger granularity and modularity of ASP .NET Core 1.0,
but this number was a bit surprising for me. All these packages are cached in directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/.dnx/packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So next time when you issue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will be far quicker to get these installed.
And if for some reason you want to clear your packages cache, it’s as simple as emptying this folder.
I hadn’t even opened Visual Studio Code yet but I know that the whole environment is set-up correctly.&lt;/p&gt;

&lt;p&gt;Realy? Not exactly found out, when I accessed routes required connection to database,
that not everything was setup correctly. As it turned out default Web Application project created by
yo asp-net generator uses SQLite as database you can see in code below which is in class Startup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddEntityFramework()
        .AddSqlite()
        .AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt;
            options.UseSqlite(Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;]));
    //…
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the connection string is defined in method Startup of class Startup and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;] = $@&amp;quot;Data Source={appEnv.ApplicationBasePath}/WebApplication.db&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I tried access database I got following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;System.DllNotFoundException: Unable to load DLL &#39;sqlite3&#39;: The specified module could not be found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was due that I didn’t install SQLite.
To install SQLite I issued command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then everything was ok.
But how I saw that error. By default application started in production mode. In this mode you cannot see a full error’s list.
To see it you must run application in Development mode. I simple ran application with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw full list of exceptions and found what was wrong.
Now I can start create my project.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;







&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing ASP .NET Core 1.0 on Ubuntu 14.04</title>
      <link>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</link>
      <pubDate>Tue, 08 Mar 2016 22:00:29 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After my last impromptu post &lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;about Project Rider&lt;/a&gt;,
I’m finally writing about the setup of my
Linux environment for ASP .NET Core 1.0. I mentioned that I am going to play with ASP .NET Core 1.0 on
Ubuntu 14.04 but for sure I’ll also play with it on Windows. However, in this post I will describe
how I installed ASP .NET Core 1.0 on Ubuntu 14.04. I am not writing about how to install
Ubuntu 14.04 itself, as it’s not the place and time to write about this.&lt;/p&gt;

&lt;p&gt;My starting point for this process was on the official
&lt;a href=&#34;https://docs.asp.net/en/latest/getting-started/installing-on-linux.html&#34;&gt;asp.net page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I opened terminal (CTRL+SHIFT+T) and executed all the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install unzip curl  
curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh &amp;amp;&amp;amp; source ~/.dnx/dnvm/dnvm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I installed all the prerequisites for the DNX by issuing this line in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libunwind8 gettext libssl-dev libcurl4-openssl-dev zlib1g libicu-dev uuid-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed DNX for .NET Core. issuing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the commands executed smoothly and without errors.&lt;/p&gt;

&lt;p&gt;I also installed Mono. Firstly, I added the package repository to my system
by executing this in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF 
 echo &amp;quot;deb http://download.mono-project.com/repo/debian wheezy main&amp;quot; | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
 sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed three mono packages with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mono-devel mono-complete ca-certificates-mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I used the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to install DNX for mono.&lt;/p&gt;

&lt;p&gt;There is also one piece of the puzzle needed. To be able to run the application in server Kestrel I had to install &lt;em&gt;libuv&lt;/em&gt;.
I did this by issuing the following commands in shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install make automake libtool curl
curl -sSL https://github.com/libuv/libuv/archive/v1.8.0.tar.gz | sudo tar zxfv - -C /usr/local/src
cd /usr/local/src/libuv-1.8.0
sudo sh autogen.sh
sudo ./configure
sudo make
sudo make install
sudo rm -rf /usr/local/src/libuv-1.8.0 &amp;amp;&amp;amp; cd ~/
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I also added these two lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source dnvm.sh
export MONO_MANAGED_WATCHER=disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to my &lt;em&gt;~/.bash_profile&lt;/em&gt; file to ensure that I can always run the dnvm and dnu commands and
to work around a known bug in Mono.
You can find more information &lt;a href=&#34;https://code.visualstudio.com/Docs/runtimes/ASPnet5&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having set up DNVM, and getting DNX done, I could now install the Visual Studio Code.
I’ve always wanted to try Visual Studio Code. I haven’t had the occasion
to do this until now. However, having access to the EAP version of Project Rider,
I am only waiting for better support of ASP .NET Core application in it and
I’ll give up Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Installing Visual Studio Code was a piece of cake. I only downloaded the zip file from this
&lt;a href=&#34;https://code.visualstudio.com/docs?dv=linux64&#34;&gt;page&lt;/a&gt; and then I unzipped it
in a location that was convenient
for me, and inside the folder where I unzipped the VS Code I had an executable file named Code.
Double clicking on it launches the VS Code.&lt;/p&gt;

&lt;p&gt;To create the first ASP .NET Core 1.0 application I also needed &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;
and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;. Yes, it’s true that nothing works these days without Node.js. Node.js and npm
are required to install and run &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt;, &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;
and other massive amounts of Node.js packages.&lt;/p&gt;

&lt;p&gt;To install Node.js I use a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;Node Version Manager&lt;/a&gt;.
I did this by issuing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installing nvm, I installed the recent version of Node.js which is 5.5.0, the issuing command was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install v5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I set it to the currently used version with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm use 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally I aliased it as the default version so that this version of Node could be used in any new shell.
I did this using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvm alias default 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I installed Yoeman then aspnet generator for Yoeman and finally Gulp and Bower.
This line executed in the terminal did the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; npm install -g yo generator-aspnet gulp bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All these steps with Node.js are required in order to have a nice generator
which helps you with the setup of
ASP .NET projects (&lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; project also) and with other things,
for example, adding a new controller or view. However, I’ll write about this in the
&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;







&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I&#39;m holding a Project Rider EAP</title>
      <link>http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/</link>
      <pubDate>Wed, 02 Mar 2016 22:21:06 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I planned for the next post in the “Daj się poznać” series to be about my Ubuntu environment setup
but something pretty amazing happened to me yesterday evening -
I got access to an EAP of Project Rider. So this is an impromptu post which fits
very well into the “Daj się poznać” series and the post which
I had planned about my Ubuntu environment setup will follow next week.&lt;/p&gt;

&lt;p&gt;I had hoped to get access to an EAP version of Project Rider and
it happened yesterday at about 9pm when I opened my mailbox and saw an email from JetBrains.
I received links to download Project Rider. I felt like a child who just got a gift from Santa Claus.
I’ve wanted to have IDE for .NET from JetBrains for so long, I can’t even remember the first time
the idea crossed my mind.
I am using ReSharper but it’s not the same and I wanted to have a “native feeling” of JetBrains’ IDEs.
Let’s look at my first impression about Project Rider.&lt;/p&gt;

&lt;p&gt;I chose install rider on Ubuntu so I downloaded the version for Linux.
I unpacked the downloaded archive into a convenient location. I opened console (CTRL+SHIFT+T) and then I typed in console&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/install/riderRS-144.4571/bin/rider.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After a short while I saw this window&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/riderSettingsPrompt.png&#34; alt=&#34;Project Rider import settings&#34; title=&#34;Project Rider import settings&#34; /&gt;
I chose not to import my settings. And the process of customizing the Rider began.&lt;/p&gt;

&lt;p&gt;On the first screen I selected a UI theme.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/uiTheme.png&#34; alt=&#34;Project Rider select UI Theme&#34; title=&#34;Project Rider select UI Theme&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The next window prompted me to select a keymap. Because I am really familiar with shortcuts from
Intellij IDEA I chose this keymap. By the way, I was pleasantly surprised that
the Visual Studio Keymap was a choice.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/keymapChoice.png&#34; alt=&#34;Project Rider select Keymap&#34; title=&#34;Project Rider select Keymap&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the next screen I was asked to choose whether I want to have a desktop entry for Project Rider or not.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/desktopEntry.png&#34; alt=&#34;Project Rider desktop entry&#34; title=&#34;Project Rider desktop entry&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I could decide whether I wanted to have a Launcher Script and where it should be.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/launcherScript.png&#34; alt=&#34;Project Rider Launcher Script&#34; title=&#34;Project Rider Launcher Script&#34; /&gt;&lt;/p&gt;

&lt;p&gt;On the next window&lt;/p&gt;

&lt;p&gt;I found a couple of useful links to
&lt;a href=&#34;https://www.jetbrains.com/rider/documentation/&#34; target=&#34;_blank&#34;&gt;Getting Started help&lt;/a&gt;,
to &lt;a href=&#34;https://youtrack.jetbrains.com/issues/RIDER&#34; target=&#34;_blank&#34;&gt;Rider Issue Tracker&lt;/a&gt;
and to &lt;a href=&#34;https://jbsrider.zendesk.com/hc/en-us&#34; target=&#34;_blank&#34;&gt;Known Issues&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/riderLinks.png&#34; alt=&#34;Project Rider EAP&#34; title=&#34;Project Rider EAP&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After I clicked &lt;em&gt;Start using Rider&lt;/em&gt;, I was prompted to insert my password in a dialog window and
then I saw the Welcome screen of Rider&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/welcomeScreen.png&#34; alt=&#34;Project Rider Welcome Screen&#34; title=&#34;Project Rider Welcome Screen&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may wonder what this yellow strip at the bottom means. You can read about it in this
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/IDEA-78860&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.
It’s a known issue in JetBrains products on Ubuntu and how to deal with it is also written in this link.&lt;/p&gt;

&lt;p&gt;I must honestly say that everything was okay during the installation and this was a  big plus.&lt;/p&gt;

&lt;p&gt;After installation, I quickly created my first console application:
I clicked &lt;em&gt;New Project&lt;/em&gt;  on Welcome screen and I saw this window&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/newProject.png&#34; alt=&#34;Project Rider New Project&#34; title=&#34;Project Rider New Project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose &lt;em&gt;Console Application&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;On the next screen I entered the project name and solution name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/newProjectProjectName.png&#34; alt=&#34;Project Rider Project Name&#34; title=&#34;Project Rider Project Name&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After this, I wrote some code&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;

namespace ConsoleApplication
{
  class Program
  {
    static void Main(string[] args)
    {
      Console.WriteLine(&amp;quot;Is it real?&amp;quot;);
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and pressed SHIFT+F10 and can you guess what happened?
At the bottom of IDE I saw this output&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/rider/firstProgramOutput.png&#34; alt=&#34;Project Rider First Program Output&#34; title=&#34;Project Rider First Program Output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So until now everything was perfect. I started playing with a web project and this time it wasn’t so good.
There is no template to create this type of project.
I created one using Yeoman aspnet generator (I’ll write about this in a future post).
But I couldn’t open it in Project Rider because the project created by this generator
doesn’t contain .sln and .csproj files and apparently
Rider requires these type of files in order to see files in solution.
I created an issue about this in JetBrains youtrack and you can follow it at this
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/RIDER-470&#34; target=&#34;_blank&#34;&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I found out in this
&lt;a href=&#34;https://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/&#34; target=&#34;_blank&#34;&gt;post&lt;/a&gt;
that CoreCLR support is coming so I must be patient. I hope that Rider will have better support for ASP
.NET Core applications because now it doesn’t have this. Currently, it doesn’t even support Views.
I created another issue about this. You can check it
&lt;a href=&#34;https://youtrack.jetbrains.com/issue/RIDER-467&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Finally, I am so happy and excited that JetBrains created Rider but
I must wait for a while until it gets better support for CoreCLR and ASP .NET Core.
During this time, I’ll be using Visual Studio Code on Linux and Visual Studio with ReSharper on Windows.
Again, great job to JetBrains! I am sure that I’m not the only one waiting for more.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;







&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>&#34;Daj się poznać&#34; - Project details</title>
      <link>http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/</link>
      <pubDate>Tue, 01 Mar 2016 10:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is my first post in the series “Daj się poznać”.
I am going to mention the details of the project which I’ll be working on during the contest.
I am going to create a simple yet powerful application which will allow me to add some events
and notify me about them at a specific time via a specified medium.
For starters, I am planing to implement sms and email notification but maybe in the future
I’ll add the ability to send notifications to some IoT device.&lt;/p&gt;

&lt;p&gt;I am going to implement this application in a way which allows me to upgrade ASP .NET Core 1.0
framework very quickly. This framework is brand new and it’s quite probable that some breaking
changes will appear in the next release. So I cannot depend on it very much.
I hope that ASP .NET Core 1.0 will have a lot of versions in the future but
I don’t want to have a nightmare during upgrading to a newer version. Therefore,
I must use architecture which prepares me for this. I don’t know exactly what this architecture
will look like but I’ll write about it in future posts as the project will continue.&lt;/p&gt;

&lt;p&gt;To implement my project I need some sort of membership system for cases like these:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user can sign in&lt;/li&gt;
&lt;li&gt;user can sign up (I am not sure)&lt;/li&gt;
&lt;li&gt;user can sign out.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Other use cases which I am going to implement are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;user can create event&lt;/li&gt;
&lt;li&gt;user can add notification to event&lt;/li&gt;
&lt;li&gt;user can add related persons to event&lt;/li&gt;
&lt;li&gt;user can see list of events&lt;/li&gt;
&lt;li&gt;user can delete event&lt;/li&gt;
&lt;li&gt;user can change event&lt;/li&gt;
&lt;li&gt;sending notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ll write more details about use cases and their implementation in future posts, but before I do this, I’ll write something about installation ASP .NET Core 1.0 on Ubuntu 14.04 and running the first web application in this operating system.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;







&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Enrolling in &#34;Daj się poznać&#34;</title>
      <link>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</link>
      <pubDate>Sun, 14 Feb 2016 13:27:14 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, Maciej Aniserowicz wrote on his blog about starting the second edition of the
&lt;a href=&#34;http://www.maciejaniserowicz.com/daj-sie-poznac/&#34;&gt;“Daj się poznać”&lt;/a&gt;
competition. I’ve decided to take part in this challenge.
I started my blog over three weeks ago and since then I have made two posts.
I think that taking part in this contest will encourage me to have a more systematic approach to my blog.
I think this contest will be a lot of fun and provide a lot of opportunities for me to learn new things.
For the competition I am required to write an average of two articles a week for three months (minimum 10 weeks),
and this seems like a big deal to me.&lt;/p&gt;

&lt;p&gt;The contest will run from March to May and the winners will be announced in June.
Writing a blog is only one part of this undertaking, the other is completing a project and all blog posts must be
related to this project. I haven’t decided what my project will be but I have the whole of February to brainstorm.
I know that I want to learn and try some new technologies, for example, &lt;a href=&#34;https://get.asp.net/&#34;&gt;ASP .NET Core 1&lt;/a&gt;,
&lt;a href=&#34;https://angular.io/&#34;&gt;Angular 2&lt;/a&gt;, and this project will be a good occasion to do this.
Maybe I will also try to use &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;,
&lt;a href=&#34;https://azure.microsoft.com&#34;&gt;Azure&lt;/a&gt; or another cloud computing platform.
We’ll see, but for sure I want to gain a lot experience from this project.
Additionally, I am going to do this project on Ubuntu 14.04.
ASP .NET Core 1 is a cross-platform framework and I am going to try it out on environments other than Windows.&lt;/p&gt;

&lt;p&gt;As you can see, I’ll be treating this competition as source for many challenges: experiencing new technologies,
regular blogging, and systematic work on my “side project”.
Everything that I am going to use is currently in the Beta stage, so this is another challenge for me.
We will see what happens in June. I hope this will be great fun and that I will have a lot of great experiences,
so&amp;hellip;let’s do it!&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;







&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
  </channel>
</rss>