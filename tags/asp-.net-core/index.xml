<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asp .Net Core on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/asp-/index.net-core/</link>
    <description>Recent content in Asp .Net Core on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Mar 2016 22:00:00 +0100</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/asp-.net-core/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Before going into production</title>
      <link>http://koscielniak.me/post/2016/03/before-going-into-production/</link>
      <pubDate>Mon, 28 Mar 2016 22:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/before-going-into-production/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I have been dealing with my project for a while and I haven’t shown anything to my Imaginary Client. They are starting to think that I haven’t done anything but burn their Imaginary Money. But I have done something. I have written posts, I have done research and I have learned a lot new things. To convince my Imaginary Client that I haven’t wasted their Imaginary Money I should quickly deploy something to production but before I do this I should tune my application a bit.&lt;/p&gt;

&lt;p&gt;The first thing I did was update Angular 2. There have been two new versions since I started this series. You can check this by command  &lt;code&gt;npm outdated&lt;/code&gt; executed in terminal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/npmOutdated.png&#34; alt=&#34;npm outdated output&#34; title=&#34;npm outdated output&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It turned out that not only was Angular 2 outdated, but 5 other packages were outdated as well.
I changed the versions of every outdated package in &lt;em&gt;package.json&lt;/em&gt; to the newest one and after this I executed &lt;code&gt;npm update&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, I added some npm packages by entering this in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install concurrently event-stream gulp-sourcemaps gulp-typescript gulp-inline-ng2-template --save-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;concurrently&lt;/em&gt; I used in my &lt;code&gt;postinstall&lt;/code&gt; script in &lt;em&gt;package.json&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;scripts&amp;quot;: {
 //...
 &amp;quot;build-dev&amp;quot;:&amp;quot;gulp build-dev&amp;quot;,
 &amp;quot;postinstall&amp;quot;: &amp;quot;concurrently \&amp;quot;typings install\&amp;quot; \&amp;quot;npm run build-dev\&amp;quot;&amp;quot;
},
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now every time I execute &lt;code&gt;npm install&lt;/code&gt; the &lt;em&gt;typings&lt;/em&gt; will be installed and my &lt;em&gt;build-dev&lt;/em&gt; gulp task will be executed.&lt;/p&gt;

&lt;p&gt;The package &lt;em&gt;event-stream&lt;/em&gt; is what I needed to merge the streams into one and return it for further processing.&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;gulp-sourcemaps&lt;/em&gt; package generates source maps that are embedded in the source file. Something like this is added at the bottom of every &lt;code&gt;.js&lt;/code&gt; file created from a TypeScript file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9tYWlu….
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The package &lt;em&gt;gulp-typescript&lt;/em&gt; is used to compile TypeScript files.&lt;/p&gt;

&lt;p&gt;Finally, this package &lt;em&gt;gulp-inline-ng2-template&lt;/em&gt; inlines HTML and CSS files into the JavaScript files of Angular 2 components.&lt;/p&gt;

&lt;p&gt;All the packages I combined in one gulp task that looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gulp.task(&#39;build-prod&#39;, [&#39;build.lib&#39;], function () {
   var tsProject = typescript.createProject(&#39;./tsconfig.json&#39;, { typescript: require(&#39;typescript&#39;) });
   var tsSrcInlined = gulp.src([webroot + &#39;**/*.ts&#39;], { base: webroot })
       .pipe(inlineNg2Template({ base: webroot }));
   return eventStream.merge(tsSrcInlined, gulp.src([&#39;typings/browser/**/*.ts&#39;,&#39;typings/browser.d.ts&#39;]))
       .pipe(sourcemaps.init())
       .pipe(typescript(tsProject))
       .pipe(sourcemaps.write())
       .pipe(gulp.dest(webroot))
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This task complies all TypeScript files in my application and inlines source maps, CSS styles and HTML templates inside components and saves all the process files inside &lt;em&gt;wwwroot&lt;/em&gt; folder. This processing reduces the number of requests to my application. I know in the HTTP2 world it won’t be needed, but as far as I know, kestrel doesn’t have support for HTTP2 yet.&lt;/p&gt;

&lt;p&gt;The next thing which I did was a conditional import of Javascript and CSS files. Dependent on the environment, I loaded them either
from
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_delivery_network&#34; target=&#34;_blank&#34;&gt;CDN&lt;/a&gt;
for production or from local for development environment. An example how I did this in the file
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Shared/_Layout.cshtml&#34; target=&#34;_blank&#34;&gt;_Layout.cshtml&lt;/a&gt;
looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;        &amp;lt;environment names=&amp;quot;Development&amp;quot;&amp;gt;
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;&amp;gt;
            &amp;lt;script src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
        &amp;lt;/environment&amp;gt;
        &amp;lt;environment names=&amp;quot;Staging,Production&amp;quot;&amp;gt;            
            &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;https://code.getmdl.io/1.1.3/material.blue-teal.min.css&amp;quot;
             asp-fallback-href=&amp;quot;lib/material-design-lite/dist/material.blue-teal.min.css&amp;quot;
             asp-fallback-test-class=&amp;quot;mdl-ripple&amp;quot; /&amp;gt;
            &amp;lt;script src=&amp;quot;https://code.getmdl.io/1.1.3/material.min.js&amp;quot;
                    asp-fallback-src=&amp;quot;lib/material-design-lite/material.min.js&amp;quot;
                    asp-fallback-test=&amp;quot;window.componentHandler&amp;quot;&amp;gt;
            &amp;lt;/script&amp;gt;
          &amp;lt;/environment&amp;gt;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An &lt;em&gt;environment&lt;/em&gt; tag is a new thing in ASP .NET Core and you can find out more about it
&lt;a href=&#34;http://docs.asp.net/en/latest/fundamentals/environments.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
As you can see, I used a fallback test to check if loading assets from CDN succeeded, if not, I loaded the local files.
I did something similar in the
&lt;a href=&#34;https://github.com/pikoscielniak/notifier/blob/master/src/web/Views/Home/Index.cshtml&#34; target=&#34;_blank&#34;&gt;Home/Index.cshtml&lt;/a&gt;
file which you can see in my github repository.&lt;/p&gt;

&lt;p&gt;In this file, I also turned on production mode in Angular 2 by executing the following script:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  System.import(&#39;angular2/core&#39;)
            .then(function(core){
                    core.enableProdMode();
                    return System.import(&#39;./app/main&#39;);
            })
            .catch(console.log.bind(console));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to have this tag &lt;em&gt;environment&lt;/em&gt; working properly, I had to add this package
&lt;em&gt;Microsoft.AspNet.Mvc.TagHelpers&lt;/em&gt; to dependencies in &lt;em&gt;project.json&lt;/em&gt;
and in the file &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; I added following line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@addTagHelper &amp;quot;*, Microsoft.AspNet.Mvc.TagHelpers&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see this tag in action, I must run my application in development mode. By default, &lt;code&gt;dnx web&lt;/code&gt; command runs an application in a production environment, so, to run the application in development mode I could do this by executing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, you can see that in development, my files are served from localhost:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/localFile.png&#34; alt=&#34;assets from local&#34; title=&#34;assets from local&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To test the production mode, I published my application in the local folder on my computer by entering the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnu publish -o ~/publishednotifier
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;~/publishednotifier&lt;/em&gt; - it is the folder where my application will be published.&lt;/p&gt;

&lt;p&gt;Inside this folder, there is another folder called &lt;em&gt;approot&lt;/em&gt; where I can find scripts for every command declared in the section &lt;em&gt;commands&lt;/em&gt; in &lt;em&gt;project.json&lt;/em&gt; file. I had only one command &lt;em&gt;web&lt;/em&gt;.
Entering this command in terminal  ( &lt;code&gt;~/publishednotifier/approot/web&lt;/code&gt;) ran my application and I could see this in a web browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I could see in the debug tool of the browser that my files are loaded from the CDN.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/goingIntoProduction/loadedFromCdn.png&#34; alt=&#34;Loaded form CDN&#34; title=&#34;Loaded form CDN&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I left space for further improvement in my project setup but I will leave the details for another post where I’ll write about package &lt;em&gt;Microsoft.AspNet.AngularServices&lt;/em&gt;.
Now, I am ready to publish my application to
&lt;a href=&#34;https://azure.microsoft.com&#34; target=&#34;_blank&#34;&gt;Azure&lt;/a&gt;. In the next post, I am going to write about what this process looked like.
&lt;h3&gt;Related posts:&lt;/h3&gt;











&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Project setup - client-side</title>
      <link>http://koscielniak.me/post/2016/03/project-setup-client-side/</link>
      <pubDate>Fri, 18 Mar 2016 08:00:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/project-setup-client-side/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not an easy task these days to set up a client-side application.
There is now an explosion of technologies. You should know all these: npm, Node.js, Grunt,
Gulp, Bower, Babel, ES2015, TypeScript, Less, Sass, Bootstrap, etc.
Yes, of course there are seeds which allow a startup project to be ready to
run but almost every one of them gives you something more than you need and
when you use this kind of seed you may not know what’s really going on
in the building process of your application.
The client-side part of my application will be based on Angular 2.
I decided to set up the Angular 2 application from scratch in order to
feel by myself what this process looks like, I’ll describe the process and what
I’ve learned in this post.&lt;/p&gt;

&lt;p&gt;I think the best place to start with something new is on its official page and so
I did this with the setup of the Angular 2 application. On this
&lt;a href=&#34;https://angular.io/&#34; target=&#34;_blank&#34;&gt;page&lt;/a&gt;
I found all the necessary information needed to run my first
Angular 2 component on a startup page of my application,
but I must also adjust what’s on this official page to the
&lt;a href=&#34;https://get.asp.net/&#34; target=&#34;_blank&#34;&gt;ASP .NET Core&lt;/a&gt; reality.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/ts/latest/quickstart.html&#34; target=&#34;_blank&#34;&gt;5 Min Quickstart&lt;/a&gt;
on the Angular 2 official page gave a ready to use scaffolding for my application.
What I need to be aware of is that in ASP .NET Core,
the root folder of my site is &lt;em&gt;wwwroot&lt;/em&gt; and all static files should go into this folder.
I inserted &lt;em&gt;app.component.ts&lt;/em&gt; and &lt;em&gt;main.ts&lt;/em&gt; to the &lt;em&gt;wwwroot&lt;/em&gt; folder.
I changed the content of &lt;em&gt;app.component.ts&lt;/em&gt; a bit so it looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import {Component} from &#39;angular2/core&#39;;
@Component({
    selector: &#39;notifier&#39;,
    template: &#39;&amp;lt;h1&amp;gt;{{title}}&amp;lt;/h1&amp;gt;&#39;
})
export class AppComponent { 
    title = &amp;quot;Notifier!!!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Other files such as: &lt;em&gt;package.json&lt;/em&gt;, &lt;em&gt;tsconfig.json&lt;/em&gt; and &lt;em&gt;typing.json&lt;/em&gt;, I put under the root of my project.
I did a couple of changes in &lt;em&gt;project.json&lt;/em&gt; so it is listed below:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;Notifier&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;scripts&amp;quot;: {   
    &amp;quot;tsc&amp;quot;: &amp;quot;tsc -w&amp;quot;,
    &amp;quot;typings&amp;quot;: &amp;quot;typings&amp;quot;,
    &amp;quot;postinstall&amp;quot;: &amp;quot;typings install&amp;quot;
  },
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;,
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;angular2&amp;quot;: &amp;quot;2.0.0-beta.9&amp;quot;,
    &amp;quot;systemjs&amp;quot;: &amp;quot;0.19.24&amp;quot;,
    &amp;quot;es6-promise&amp;quot;: &amp;quot;^3.0.2&amp;quot;,
    &amp;quot;es6-shim&amp;quot;: &amp;quot;^0.33.3&amp;quot;,
    &amp;quot;reflect-metadata&amp;quot;: &amp;quot;0.1.2&amp;quot;,
    &amp;quot;rxjs&amp;quot;: &amp;quot;5.0.0-beta.2&amp;quot;,
    &amp;quot;zone.js&amp;quot;: &amp;quot;0.5.15&amp;quot;
  },
  &amp;quot;devDependencies&amp;quot;: {
    &amp;quot;del&amp;quot;: &amp;quot;^2.0.2&amp;quot;,
    &amp;quot;gulp&amp;quot;: &amp;quot;^3.9.0&amp;quot;,
    &amp;quot;typescript&amp;quot;: &amp;quot;^1.8.7&amp;quot;,
    &amp;quot;typings&amp;quot;:&amp;quot;^0.7.5&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I left &lt;em&gt;&amp;ldquo;dependencies&amp;rdquo;&lt;/em&gt; untouched but I changed &lt;em&gt;&amp;ldquo;devDependencies&amp;rdquo;&lt;/em&gt; quite a lot.
I don’t need live reload, so I removed this and I also added &lt;em&gt;del&lt;/em&gt; and &lt;em&gt;gulp&lt;/em&gt; which allowed me
to do some processing on application files. The most interesting things are in
the &lt;em&gt;&amp;ldquo;scripts&amp;rdquo;&lt;/em&gt; part of the &lt;em&gt;package.json&lt;/em&gt; file. I left only three commands and
two of them were unchanged, these are &lt;em&gt;typings&lt;/em&gt; and &lt;em&gt;postinstall&lt;/em&gt;.
These commands download typings for TypeScript to the root of your project right after
your &lt;em&gt;npm install&lt;/em&gt; command finishes their work. After this there’ll be a folder
named &lt;em&gt;typings&lt;/em&gt; in the root of the project. It’s wise to add this folder to &lt;em&gt;.gitignore&lt;/em&gt;.
The command &lt;em&gt;typings&lt;/em&gt; in this configuration works in the root of your project.
That’s why &lt;em&gt;typings.json&lt;/em&gt; is in this location and not in &lt;em&gt;wwwroot&lt;/em&gt;.
This file is a typings command configuration and it persists dependencies so that everyone on
the project can replicate it and that’s why you don’t need to commit &lt;em&gt;typings&lt;/em&gt; folder.&lt;/p&gt;

&lt;p&gt;Another command I changed a bit was &lt;em&gt;tsc&lt;/em&gt;, so when I run it my
TypeScript files will be watching for changes and compiled right after these changes happened.
This command looks for config in the location where it works.
It is the root of the project so again that’s why &lt;em&gt;tsconfig.json&lt;/em&gt; stays in
this place and not in the &lt;em&gt;wwwroot&lt;/em&gt;. This command creates &lt;em&gt;.js&lt;/em&gt; files and &lt;em&gt;.map&lt;/em&gt;
files just next to the original &lt;em&gt;.ts&lt;/em&gt; files, it is also a good practice to ignore
these &lt;em&gt;.js&lt;/em&gt; and &lt;em&gt;.map&lt;/em&gt; files in version control system. To do this I inserted these two lines to &lt;em&gt;.gitignore&lt;/em&gt;&lt;br /&gt;
&lt;code&gt;src/web/wwwroot/app/**/*.js&lt;/code&gt;&lt;br /&gt;
&lt;code&gt;src/web/wwwroot/app/**/*.map&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The next step was executing in terminal command &lt;code&gt;npm install&lt;/code&gt;.
Doing this allowed me to fetch all dependencies which are specified in &lt;em&gt;package.json&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I put my &lt;em&gt;package.json&lt;/em&gt; in the root of project so when I executed &lt;em&gt;npm install&lt;/em&gt; the &lt;em&gt;node_modules&lt;/em&gt;
folder was located in this location. We know that only the &lt;em&gt;wwwroot&lt;/em&gt; folder is visible
from the outside world. I needed a way to move files from &lt;em&gt;node_modules&lt;/em&gt; to the location somewhere
inside &lt;em&gt;wwwroot&lt;/em&gt;. I used task runner &lt;em&gt;gulp&lt;/em&gt; to move these files to the &lt;em&gt;lib&lt;/em&gt; folder inside the &lt;em&gt;wwwroot&lt;/em&gt;.
You may have noticed that I added a bunch of modules inside &lt;em&gt;&amp;ldquo;devDependencies&amp;rdquo;&lt;/em&gt; in &lt;em&gt;package.json&lt;/em&gt;,
these are needed for copying desired files to &lt;em&gt;wwwroot&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I added &lt;em&gt;gulpfile.js&lt;/em&gt; into the root of project and inside this file
I added some &lt;em&gt;gulp&lt;/em&gt; tasks so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;use strict&amp;quot;;

var path = require(&#39;path&#39;);
var gulp = require(&#39;gulp&#39;);
var del = require(&#39;del&#39;);

var webroot = &amp;quot;./wwwroot/&amp;quot;;

var config = {
    libBase: &#39;node_modules&#39;,
    lib: [
        require.resolve(&#39;es6-shim/es6-shim.min.js&#39;),
        require.resolve(&#39;es6-shim/es6-shim.map&#39;),
        require.resolve(&#39;systemjs/dist/system-polyfills.js&#39;),
        require.resolve(&#39;systemjs/dist/system-polyfills.js.map&#39;),
        require.resolve(&#39;angular2/es6/dev/src/testing/shims_for_IE.js&#39;),
        require.resolve(&#39;systemjs/dist/system.src.js&#39;),
        require.resolve(&#39;angular2/bundles/angular2-polyfills.js&#39;),
        require.resolve(&#39;rxjs/bundles/Rx.js&#39;),
        require.resolve(&#39;angular2/bundles/angular2.dev.js&#39;),
        require.resolve(&#39;angular2/bundles/router.dev.js&#39;),
        require.resolve(&#39;angular2/bundles/http.dev.js&#39;)
    ]
};

gulp.task(&#39;build.lib&#39;, [&#39;clean&#39;], function() {
    return gulp.src(config.lib, { base: config.libBase })
        .pipe(gulp.dest(webroot + &#39;lib&#39;));
});

gulp.task(&#39;build-dev&#39;, [&#39;build.lib&#39;], function() {

});
gulp.task(&#39;clean&#39;, function() {
    return del([webroot + &#39;lib&#39;]);
});

gulp.task(&#39;default&#39;, [&#39;build-dev&#39;]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You may wonder why I bothered with all this stuff, shouldn’t I have used
&lt;a href=&#34;https://en.wikipedia.org/wiki/Content_Delivery_Network&#34; target=&#34;_blank&#34;&gt;CDN&lt;/a&gt; instead?
Yes, of course and for sure I’ll do this. However, for now
I chose the harder way to learn a bit more and gain knowledge on how
to setup a project when you cannot use CDN. At this stage,
I entered the command &lt;code&gt;gulp build-dev&lt;/code&gt; and inside &lt;em&gt;wwwroot&lt;/em&gt; a &lt;em&gt;lib&lt;/em&gt; folder was created
which contains specified libraries.
After this, my &lt;em&gt;wwwroot&lt;/em&gt; structure looked like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/wwwrootAfterSetup.png&#34; alt=&#34;wwwroot after setup&#34; title=&#34;wwwroot after setup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now I can combine my Angular 2 with ASP .NET Core. To do this,
I need to create a couple of &lt;em&gt;.cshtml&lt;/em&gt; files inside the &lt;em&gt;Views&lt;/em&gt; folder.
Firstly, I must create this folder and then inside the &lt;em&gt;Views&lt;/em&gt; folder I created two more folders:
&lt;em&gt;Shared&lt;/em&gt; and &lt;em&gt;Home&lt;/em&gt;. Inside the &lt;em&gt;Shared&lt;/em&gt; folder I created a &lt;em&gt;_Layout.cshtml&lt;/em&gt; file and inside &lt;em&gt;Home&lt;/em&gt;
I created &lt;em&gt;Index.cshtml&lt;/em&gt;. Inside the &lt;em&gt;Views&lt;/em&gt; folder, I had to create another file:
&lt;em&gt;_ViewImports.cshtml&lt;/em&gt; which gives you the opportunity to provide some default usings for all views.
For now I left the &lt;em&gt;_ViewImports.cshtml&lt;/em&gt; file empty.&lt;/p&gt;

&lt;p&gt;I created another file in &lt;em&gt;Views&lt;/em&gt; folder &lt;em&gt;_ViewStart.cshtml&lt;/em&gt;.
This file when placed into the &lt;em&gt;Views&lt;/em&gt; folder will influence all views in this folder hierarchy.
I used this file to specify the layout for all views.
Although I am going to have only one view. The content of my &lt;em&gt;_ViewStart.cshtml&lt;/em&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;@{
   Layout = &amp;quot;_Layout&amp;quot;;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;My &lt;em&gt;_Layout.cshtml&lt;/em&gt; at this stage looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
        &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot; /&amp;gt;
        &amp;lt;title&amp;gt;Notifier&amp;lt;/title&amp;gt;
        &amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        @RenderBody()
        @RenderSection(&amp;quot;scripts&amp;quot;, required: false)
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should pay attention to this element &lt;code&gt;&amp;lt;base href=&amp;quot;/&amp;quot; /&amp;gt;&lt;/code&gt;.
It is required by Angular 2 to tell the router how to compose navigation URLs.
You can read more about it
&lt;a href=&#34;https://angular.io/docs/ts/latest/guide/router.html&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The file &lt;em&gt;Index.cshtml&lt;/em&gt; looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;notifier&amp;gt;
    Loading...
&amp;lt;/notifier&amp;gt;
@section scripts {

    &amp;lt;!-- 1. Load libraries --&amp;gt;
    &amp;lt;!-- IE required polyfills, in this exact order --&amp;gt;
     &amp;lt;script src=&amp;quot;lib/es6-shim/es6-shim.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/systemjs/dist/system-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/es6/dev/src/testing/shims_for_IE.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;   
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/angular2-polyfills.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/systemjs/dist/system.src.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/rxjs/bundles/Rx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/angular2.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/router.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;lib/angular2/bundles/http.dev.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;


    &amp;lt;script&amp;gt;
        System.config({
            packages: {&#39;app&#39;: {defaultExtension: &#39;js&#39;}}
        });
        System.import(&#39;./app/main&#39;).catch(console.log.bind(console));
    &amp;lt;/script&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All I did here was to simply include all the files copied to the &lt;em&gt;wwwroot/lib&lt;/em&gt; folder and
I passed the configuration to
&lt;a href=&#34;https://github.com/systemjs/systemjs&#34; target=&#34;_blank&#34;&gt;System.js&lt;/a&gt;,
which is a module loader responsible for loading
the main file and other application files.&lt;/p&gt;

&lt;p&gt;I must of course add &lt;em&gt;HomeController&lt;/em&gt; which will return the &lt;em&gt;Index&lt;/em&gt; view.
It’s located in the &lt;em&gt;Controllers&lt;/em&gt; folder and its content are simply this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;using Microsoft.AspNet.Mvc;

namespace Notifier.Web.Controllers
{
    public class HomeController : Controller
    {
        public IActionResult Index()
        {
            return View();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After all these steps my project structure looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/projectFoldersTree.png&#34; alt=&#34;Project folders tree&#34; title=&#34;Project folders tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I am almost done but before I run the application I have to do a couple of improvements
in my server-side setup which I didn’t need before. Firstly, I must setup
the default route for my application which will be &lt;em&gt;Home/Index&lt;/em&gt;.
I did this by adding two lines in method &lt;em&gt;Configure&lt;/em&gt; of &lt;em&gt;Startup&lt;/em&gt; class so now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseMvc(routes =&amp;gt;{
                routes.MapRoute(name:&amp;quot;default&amp;quot;, template: &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;);
                routes.MapRoute(&amp;quot;spa-fallback&amp;quot;,&amp;quot;{*anything}&amp;quot;,new{controller =&amp;quot;Home&amp;quot;, action=&amp;quot;Index&amp;quot;} );                
            });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This &lt;em&gt;&amp;ldquo;spa-fallback&amp;rdquo;&lt;/em&gt; route is in case of 404 requests.
It isn’t a perfect solution. I’ll show why and how to do it better in one of my future posts.
At this moment, you can run the application by issuing in terminal
&lt;code&gt;dnx web&lt;/code&gt; and you’ll see…an empty page&amp;hellip;do you know why?
Because at this moment my application does not serve static files.
You must add another middleware to allow the application to do this.
What’s more, you must even add another Nuget package which is called:
&lt;em&gt;Microsoft.AspNet.StaticFiles&lt;/em&gt;. I inserted this dependency in &lt;em&gt;project.json&lt;/em&gt;
and then instead of typing, I clicked the Restore button in Visual Studio Code.
After this I used this middleware by typing this line &lt;em&gt;app.UseStaticFiles()&lt;/em&gt;;
in &lt;em&gt;Configure&lt;/em&gt; method, so now it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseStaticFiles();
            
            app.UseMvc(routes =&amp;gt;{
                routes.MapRoute(name:&amp;quot;default&amp;quot;, template: &amp;quot;{controller=Home}/{action=Index}/{id?}&amp;quot;);
                routes.MapRoute(&amp;quot;spa-fallback&amp;quot;,&amp;quot;{*anything}&amp;quot;,new{controller =&amp;quot;Home&amp;quot;, action=&amp;quot;Index&amp;quot;} );                
            });
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember, the order of middlewares is imported if you put this line:
&lt;em&gt;app.UseStaticFiles();&lt;/em&gt; after &lt;em&gt;UseMvc&lt;/em&gt; middleware your static files still won’t be served.&lt;/p&gt;

&lt;p&gt;Running the application now wouldn’t show anything fancy but only errors in the browser’s console,
I must compile TypeScript files. To do this I entered &lt;code&gt;npm run tsc&lt;/code&gt; and now &lt;em&gt;.js&lt;/em&gt;
files are created and this tool is watching for any changes and recompiles files
almost immediately when these changes happen. After this, I expected something more
attractive and I was right. This is what I got:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/client/finalResult.png&#34; alt=&#34;Final result&#34; title=&#34;Final result&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you would like to repeat my steps, for sure you will encounter some errors and
you won’t see them until you add another package called: &lt;em&gt;Microsoft.AspNet.Diagnostics&lt;/em&gt;
and in &lt;em&gt;Configure&lt;/em&gt; method you use middleware &lt;em&gt;UseDeveloperExceptionPage&lt;/em&gt;.
After this, when an error happens you’ll see a very nice error page.
You should add this as the first middleware and remember about &lt;em&gt;dnx restore&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;I haven’t finished my set-up yet but I think that this post is already long enough. In my next few posts,
I will talk about how I added styling to my application and how I improved this set-up a bit.&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;











&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
    <item>
      <title>Project setup - server-side</title>
      <link>http://koscielniak.me/post/2016/03/project-setup-server-side/</link>
      <pubDate>Wed, 16 Mar 2016 08:45:00 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/project-setup-server-side/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I am writing about how I set up the server-side of my project - Notifier.
The application will consist of REST API and Angular 2 single page application.
For now, both parts will be hosted in the same ASP .NET Core application.
To create this project I used yo aspnet generator.
If you want to find out how I installed these tools check out
&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;this post&lt;/a&gt;.
I entered in terminal command &lt;code&gt;yo aspnet&lt;/code&gt; and after this I saw the following output,
which gave me a choice of project type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/emptyApplication.png&#34; alt=&#34;What type of application do you want to create?&#34; title=&#34;What type of application do you want to create?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I chose empty project.&lt;/p&gt;

&lt;p&gt;After this I was asked to enter the project name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/appName.png&#34; alt=&#34;What&#39;s the name of your ASP.NET application?&#34; title=&#34;What&#39;s the name of your ASP.NET application?&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I typed &lt;em&gt;Web&lt;/em&gt;. This name has an influence on the name of the folder which will be created when you hit enter.
For the rest of this article this newly created folder will be referred to as the root of the project.
When I opened this project in Visual Studio Code I could see the following structure of my project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/emptyTree.png&#34; alt=&#34;Structure of empty project&#34; title=&#34;Structure of empty project&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To be able to use Web API in my project I must import the following nuget package:
&lt;em&gt;Microsoft.AspNet.Mvc&lt;/em&gt;
I did this by typing its name in project.json under the dependencies section.
When you do this you can see a very nice intellisense which helps to choose the right package
in right version.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/intelliSenseNuget.png&#34; alt=&#34;Intellisense in project.json&#34; title=&#34;Intellisense in project.json&#34; /&gt;&lt;/p&gt;

&lt;p&gt;After this is what my dependency section looked like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;dependencies&amp;quot;: {
     &amp;quot;Microsoft.AspNet.IISPlatformHandler&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
     &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;: &amp;quot;1.0.0-rc1-final&amp;quot;,
     &amp;quot;Microsoft.AspNet.Mvc&amp;quot;: &amp;quot;6.0.0-rc1-final&amp;quot;
   }, 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The next thing which I did was issuing in terminal the command &lt;code&gt;dnu restore&lt;/code&gt;.
I must be in the root folder of the project to issue this command. Actually,
Visual Studio Code shows at the top a strip with the button Restore which does exactly the same.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/restoreButton.png&#34; alt=&#34;Restore button in VS Code&#34; title=&#34;Restore button in VS Code&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then I changed my Startup file so it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Microsoft.AspNet.Builder;
using Microsoft.Extensions.DependencyInjection;

namespace Notifier.Web
{
    public class Startup
    {
        // This method gets called by the runtime. Use this method to add services to the container.
        // For more information on how to configure your application, visit http://go.microsoft.com/fwlink/?LinkID=398940
        public void ConfigureServices(IServiceCollection services)
        {            
            services.AddMvc();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app)
        {
            app.UseIISPlatformHandler();
            
            app.UseMvc();
        }

        // Entry point for the application.
        public static void Main(string[] args) =&amp;gt; Microsoft.AspNet.Hosting.WebApplication.Run&amp;lt;Startup&amp;gt;(args);
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I added &lt;code&gt;services.AddMvc();&lt;/code&gt; in &lt;code&gt;ConfigureServices&lt;/code&gt; method and &lt;code&gt;app.UseMvc();&lt;/code&gt; in &lt;code&gt;Configure&lt;/code&gt; method.
At the occasion, I also hit CTRL+. And chose &lt;em&gt;Remove Unnecessary Usings&lt;/em&gt; which did what it says.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/removeUnnecessary.png&#34; alt=&#34;Removing unnecessary usings&#34; title=&#34;Removing unnecessary usings&#34; /&gt;&lt;/p&gt;

&lt;p&gt;You may not know but MVC and Web API are now unified in ASP.NET Core 1.0.
There&amp;rsquo;s no need to import something special for Web API.
Then it was time to create first the WebApi controller.
Inside the root of my project I created a folder Controllers (&lt;code&gt;mkdir Controllers&lt;/code&gt;),
and my goal was to create a dummy API controller inside it.
I achieved my goal using &lt;code&gt;yo aspnet generator&lt;/code&gt;.
Firstly, I navigated to the newly created Controllers folder and then
I used the command &lt;code&gt;yo aspnet --help&lt;/code&gt; in it. That command showed me how
I can create a WebApi controller.
It turned out that there is command &lt;code&gt;yo aspnet:WebApiController&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/yoaspnetHelp.png&#34; alt=&#34;yo aspnet --help&#34; title=&#34;yo aspnet --help&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I executed it in terminal passing &lt;em&gt;ValuesController&lt;/em&gt; as the name of my controller.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet:WebApiController ValuesController
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command added file ValuesController.cs inside my Controllers folder.&lt;/p&gt;

&lt;p&gt;And inside this file was the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNet.Mvc;

// For more information on enabling Web API for empty projects, visit http://go.microsoft.com/fwlink/?LinkID=397860

namespace notifier.Controllers
{
    [Route(&amp;quot;api/[controller]&amp;quot;)]
    public class ValuesController : Controller
    {
        // GET: api/values
        [HttpGet]
        public IEnumerable&amp;lt;string&amp;gt; Get()
        {
            return new string[] { &amp;quot;value1&amp;quot;, &amp;quot;value2&amp;quot; };
        }

        // GET api/values/5
        [HttpGet(&amp;quot;{id}&amp;quot;)]
        public string Get(int id)
        {
            return &amp;quot;value&amp;quot;;
        }

        // POST api/values
        [HttpPost]
        public void Post([FromBody]string value)
        {
        }

        // PUT api/values/5
        [HttpPut(&amp;quot;{id}&amp;quot;)]
        public void Put(int id, [FromBody]string value)
        {
        }

        // DELETE api/values/5
        [HttpDelete(&amp;quot;{id}&amp;quot;)]
        public void Delete(int id)
        {
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you should not typed extension &lt;em&gt;.cs&lt;/em&gt;. Generator adds this for you.&lt;/p&gt;

&lt;p&gt;That was enough for me to test that I had the server side part of my application already working.
To be sure about it, I had to run my application. I entered in terminal the command &lt;code&gt;cd ..&lt;/code&gt; because
I was still in the Controllers folder and you can start your application only from a root
folder of your project and in this root folder I issued the command &lt;code&gt;dnx web&lt;/code&gt; and
I got the following output in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Hosting environment: Production
Now listening on: http://localhost:5000
Application started. Press Ctrl+C to shut down
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It seemed that everything was okay. This is how it looked when
I did a get request under url &lt;a href=&#34;http://localhost:5000/api/values&#34;&gt;http://localhost:5000/api/values&lt;/a&gt; using
&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop&#34; target=&#34;_blank&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/applicationSetup/valuesFromController.png&#34; alt=&#34;Values from controller in Postman&#34; title=&#34;Values from controller in Postman&#34; /&gt;&lt;/p&gt;

&lt;p&gt;What &lt;code&gt;dnx web&lt;/code&gt; command does you can check in the file project.json in the section commands.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt; &amp;quot;commands&amp;quot;: {
    &amp;quot;web&amp;quot;: &amp;quot;Microsoft.AspNet.Server.Kestrel&amp;quot;
  },
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see web is an alias for &lt;em&gt;Microsoft.AspNet.Server.Kestrel&lt;/em&gt;.
This is a cross platform server which is used to run ASP .NET Core applications.
I’ll write more about ASP .NET Core during my series,
but for now the setup of my Project’s server side is finished.&lt;/p&gt;

&lt;p&gt;Yes, there’ll be more things to set up in the future but for now I don’t need them as
I am happy with everything I have now. Now I can start to set up my client-side.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;











&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>My first ASP NET Core 1.0 web application</title>
      <link>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</link>
      <pubDate>Wed, 09 Mar 2016 15:00:39 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I will discuss how I tested my Ubuntu 14.04 if it is ready
for creating the ASP .NET Core 1.0 application.
I wrote &lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;here&lt;/a&gt;
about how I configured my Ubuntu 14.04 to create ASP .NET Core 1.0 apps.
So, let’s start with the first application.&lt;/p&gt;

&lt;p&gt;First, what I did was entering in the terminal the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I saw what I could do with Yeoman aspnet generator.
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnethelp.png&#34; alt=&#34;yo aspnet --help&#34; title=&#34;yo aspnet --help&#34; /&gt;
As it turned out this generator can be helpful not only with aspnet stuff but also with javascript, typescript,
application configuration or even with a Dockerfile.&lt;/p&gt;

&lt;p&gt;However, to start, I had to create an application first so I entered the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw this:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnet.png&#34; alt=&#34;yo aspnet&#34; title=&#34;yo aspnet&#34; /&gt;
I chose Web Application from the menu and I named it “WebApplication”.
Then I changed the directory to the newly created application directory called, unsurprisingly WebApplication
(&lt;code&gt;cd WebApplication&lt;/code&gt;) and then I issued:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm use 1.0.0-rc1-update1 -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which changed the framework version to coreclr in default was mono. I wanted to try this on coreclr, first.
Then, inside &amp;ldquo;WebApplication&amp;rdquo; directory I wrote the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which caused all the nuget packages to begin installing.&lt;/p&gt;

&lt;p&gt;I took a while to get all the packages but finally everything was downloaded, installed and ready to run.
Then I ran the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally in the browser under the url &lt;code&gt;http://localhost:5000&lt;/code&gt;
I could see this beautiful startup page:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/startupPage.png&#34; alt=&#34;ASP .NET Core 1.0 Startup page&#34; title=&#34;ASP .NET Core 1.0 Startup page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was an exciting process to install all these things and finally run the first application.
Two things astonished me the most during this, firstly, that the whole process of installing
all this stuff and running the application went gently and smoothly although rather lengthily.
I expected something more challenging but…good job to all of the teams.
Secondly, there were a large number of packages installed after issuing the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were 257 packages
&lt;img src=&#34;http://koscielniak.me/post/2016/03/dnuRestore.png&#34; alt=&#34;dnu restore&#34; title=&#34;dnu restore&#34; /&gt;
I knew about bigger granularity and modularity of ASP .NET Core 1.0,
but this number was a bit surprising for me. All these packages are cached in directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/.dnx/packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So next time when you issue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will be far quicker to get these installed.
And if for some reason you want to clear your packages cache, it’s as simple as emptying this folder.
I hadn’t even opened Visual Studio Code yet but I know that the whole environment is set-up correctly.&lt;/p&gt;

&lt;p&gt;Realy? Not exactly found out, when I accessed routes required connection to database,
that not everything was setup correctly. As it turned out default Web Application project created by
yo asp-net generator uses SQLite as database you can see in code below which is in class Startup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddEntityFramework()
        .AddSqlite()
        .AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt;
            options.UseSqlite(Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;]));
    //…
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the connection string is defined in method Startup of class Startup and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;] = $@&amp;quot;Data Source={appEnv.ApplicationBasePath}/WebApplication.db&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I tried access database I got following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;System.DllNotFoundException: Unable to load DLL &#39;sqlite3&#39;: The specified module could not be found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was due that I didn’t install SQLite.
To install SQLite I issued command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then everything was ok.
But how I saw that error. By default application started in production mode. In this mode you cannot see a full error’s list.
To see it you must run application in Development mode. I simple ran application with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw full list of exceptions and found what was wrong.
Now I can start create my project.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;











&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing ASP .NET Core 1.0 on Ubuntu 14.04</title>
      <link>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</link>
      <pubDate>Tue, 08 Mar 2016 22:00:29 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After my last impromptu post &lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;about Project Rider&lt;/a&gt;,
I’m finally writing about the setup of my
Linux environment for ASP .NET Core 1.0. I mentioned that I am going to play with ASP .NET Core 1.0 on
Ubuntu 14.04 but for sure I’ll also play with it on Windows. However, in this post I will describe
how I installed ASP .NET Core 1.0 on Ubuntu 14.04. I am not writing about how to install
Ubuntu 14.04 itself, as it’s not the place and time to write about this.&lt;/p&gt;

&lt;p&gt;My starting point for this process was on the official
&lt;a href=&#34;https://docs.asp.net/en/latest/getting-started/installing-on-linux.html&#34;&gt;asp.net page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I opened terminal (CTRL+SHIFT+T) and executed all the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install unzip curl  
curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh &amp;amp;&amp;amp; source ~/.dnx/dnvm/dnvm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I installed all the prerequisites for the DNX by issuing this line in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libunwind8 gettext libssl-dev libcurl4-openssl-dev zlib1g libicu-dev uuid-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed DNX for .NET Core. issuing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the commands executed smoothly and without errors.&lt;/p&gt;

&lt;p&gt;I also installed Mono. Firstly, I added the package repository to my system
by executing this in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF 
 echo &amp;quot;deb http://download.mono-project.com/repo/debian wheezy main&amp;quot; | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
 sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed three mono packages with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mono-devel mono-complete ca-certificates-mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I used the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to install DNX for mono.&lt;/p&gt;

&lt;p&gt;There is also one piece of the puzzle needed. To be able to run the application in server Kestrel I had to install &lt;em&gt;libuv&lt;/em&gt;.
I did this by issuing the following commands in shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install make automake libtool curl
curl -sSL https://github.com/libuv/libuv/archive/v1.8.0.tar.gz | sudo tar zxfv - -C /usr/local/src
cd /usr/local/src/libuv-1.8.0
sudo sh autogen.sh
sudo ./configure
sudo make
sudo make install
sudo rm -rf /usr/local/src/libuv-1.8.0 &amp;amp;&amp;amp; cd ~/
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I also added these two lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source dnvm.sh
export MONO_MANAGED_WATCHER=disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to my &lt;em&gt;~/.bash_profile&lt;/em&gt; file to ensure that I can always run the dnvm and dnu commands and
to work around a known bug in Mono.
You can find more information &lt;a href=&#34;https://code.visualstudio.com/Docs/runtimes/ASPnet5&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having set up DNVM, and getting DNX done, I could now install the Visual Studio Code.
I’ve always wanted to try Visual Studio Code. I haven’t had the occasion
to do this until now. However, having access to the EAP version of Project Rider,
I am only waiting for better support of ASP .NET Core application in it and
I’ll give up Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Installing Visual Studio Code was a piece of cake. I only downloaded the zip file from this
&lt;a href=&#34;https://code.visualstudio.com/docs?dv=linux64&#34;&gt;page&lt;/a&gt; and then I unzipped it
in a location that was convenient
for me, and inside the folder where I unzipped the VS Code I had an executable file named Code.
Double clicking on it launches the VS Code.&lt;/p&gt;

&lt;p&gt;To create the first ASP .NET Core 1.0 application I also needed &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;
and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;. Yes, it’s true that nothing works these days without Node.js. Node.js and npm
are required to install and run &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt;, &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;
and other massive amounts of Node.js packages.&lt;/p&gt;

&lt;p&gt;To install Node.js I use a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;Node Version Manager&lt;/a&gt;.
I did this by issuing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installing nvm, I installed the recent version of Node.js which is 5.5.0, the issuing command was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install v5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I set it to the currently used version with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm use 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally I aliased it as the default version so that this version of Node could be used in any new shell.
I did this using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvm alias default 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I installed Yoeman then aspnet generator for Yoeman and finally Gulp and Bower.
This line executed in the terminal did the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; npm install -g yo generator-aspnet gulp bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All these steps with Node.js are required in order to have a nice generator
which helps you with the setup of
ASP .NET projects (&lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; project also) and with other things,
for example, adding a new controller or view. However, I’ll write about this in the
&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;











&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enrolling in &#34;Daj się poznać&#34;</title>
      <link>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</link>
      <pubDate>Sun, 14 Feb 2016 13:27:14 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, Maciej Aniserowicz wrote on his blog about starting the second edition of the
&lt;a href=&#34;http://www.maciejaniserowicz.com/daj-sie-poznac/&#34;&gt;“Daj się poznać”&lt;/a&gt;
competition. I’ve decided to take part in this challenge.
I started my blog over three weeks ago and since then I have made two posts.
I think that taking part in this contest will encourage me to have a more systematic approach to my blog.
I think this contest will be a lot of fun and provide a lot of opportunities for me to learn new things.
For the competition I am required to write an average of two articles a week for three months (minimum 10 weeks),
and this seems like a big deal to me.&lt;/p&gt;

&lt;p&gt;The contest will run from March to May and the winners will be announced in June.
Writing a blog is only one part of this undertaking, the other is completing a project and all blog posts must be
related to this project. I haven’t decided what my project will be but I have the whole of February to brainstorm.
I know that I want to learn and try some new technologies, for example, &lt;a href=&#34;https://get.asp.net/&#34;&gt;ASP .NET Core 1&lt;/a&gt;,
&lt;a href=&#34;https://angular.io/&#34;&gt;Angular 2&lt;/a&gt;, and this project will be a good occasion to do this.
Maybe I will also try to use &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;,
&lt;a href=&#34;https://azure.microsoft.com&#34;&gt;Azure&lt;/a&gt; or another cloud computing platform.
We’ll see, but for sure I want to gain a lot experience from this project.
Additionally, I am going to do this project on Ubuntu 14.04.
ASP .NET Core 1 is a cross-platform framework and I am going to try it out on environments other than Windows.&lt;/p&gt;

&lt;p&gt;As you can see, I’ll be treating this competition as source for many challenges: experiencing new technologies,
regular blogging, and systematic work on my “side project”.
Everything that I am going to use is currently in the Beta stage, so this is another challenge for me.
We will see what happens in June. I hope this will be great fun and that I will have a lot of great experiences,
so&amp;hellip;let’s do it!&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;











&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-server-side/&#34;&gt;Project setup - server-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/project-setup-client-side/&#34;&gt;Project setup - client-side&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/adding-styling-to-my-application/&#34;&gt;Adding styling to my application&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/angular2-confirm-dialog-component/&#34;&gt;Angular 2 Confirm Dialog Component&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/before-going-into-production/&#34;&gt;Before going into production&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
  </channel>
</rss>