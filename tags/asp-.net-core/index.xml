<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asp .Net Core on Piotr Kościelniak - passionate programmer</title>
    <link>http://koscielniak.me/tags/asp-/index.net-core/</link>
    <description>Recent content in Asp .Net Core on Piotr Kościelniak - passionate programmer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Mar 2016 15:00:39 +0100</lastBuildDate>
    <atom:link href="http://koscielniak.me/tags/asp-.net-core/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>My first ASP NET Core 1.0 web application</title>
      <link>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</link>
      <pubDate>Wed, 09 Mar 2016 15:00:39 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In this post, I will discuss how I tested my Ubuntu 14.04 if it is ready
for creating the ASP .NET Core 1.0 application.
I wrote &lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;here&lt;/a&gt;
about how I configured my Ubuntu 14.04 to create ASP .NET Core 1.0 apps.
So, let’s start with the first application.&lt;/p&gt;

&lt;p&gt;First, what I did was entering in the terminal the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet --help
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I saw what I could do with Yeoman aspnet generator.
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnethelp.png&#34; alt=&#34;yo aspnet --help&#34; title=&#34;yo aspnet --help&#34; /&gt;
As it turned out this generator can be helpful not only with aspnet stuff but also with javascript, typescript,
application configuration or even with a Dockerfile.&lt;/p&gt;

&lt;p&gt;However, to start, I had to create an application first so I entered the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yo aspnet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw this:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/yoaspnet.png&#34; alt=&#34;yo aspnet&#34; title=&#34;yo aspnet&#34; /&gt;
I chose Web Application from the menu and I named it “WebApplication”.
Then I changed the directory to the newly created application directory called, unsurprisingly WebApplication
(&lt;code&gt;cd WebApplication&lt;/code&gt;) and then I issued:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm use 1.0.0-rc1-update1 -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which changed the framework version to coreclr in default was mono. I wanted to try this on coreclr, first.
Then, inside &amp;ldquo;WebApplication&amp;rdquo; directory I wrote the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which caused all the nuget packages to begin installing.&lt;/p&gt;

&lt;p&gt;I took a while to get all the packages but finally everything was downloaded, installed and ready to run.
Then I ran the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally in the browser under the url &lt;code&gt;http://localhost:5000&lt;/code&gt;
I could see this beautiful startup page:
&lt;img src=&#34;http://koscielniak.me/post/2016/03/startupPage.png&#34; alt=&#34;ASP .NET Core 1.0 Startup page&#34; title=&#34;ASP .NET Core 1.0 Startup page&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It was an exciting process to install all these things and finally run the first application.
Two things astonished me the most during this, firstly, that the whole process of installing
all this stuff and running the application went gently and smoothly although rather lengthily.
I expected something more challenging but…good job to all of the teams.
Secondly, there were a large number of packages installed after issuing the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There were 257 packages
&lt;img src=&#34;http://koscielniak.me/post/2016/03/dnuRestore.png&#34; alt=&#34;dnu restore&#34; title=&#34;dnu restore&#34; /&gt;
I knew about bigger granularity and modularity of ASP .NET Core 1.0,
but this number was a bit surprising for me. All these packages are cached in directory:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;~/.dnx/packages
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So next time when you issue:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnu restore
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;it will be far quicker to get these installed.
And if for some reason you want to clear your packages cache, it’s as simple as emptying this folder.
I hadn’t even opened Visual Studio Code yet but I know that the whole environment is set-up correctly.&lt;/p&gt;

&lt;p&gt;Realy? Not exactly found out, when I accessed routes required connection to database,
that not everything was setup correctly. As it turned out default Web Application project created by
yo asp-net generator uses SQLite as database you can see in code below which is in class Startup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;public void ConfigureServices(IServiceCollection services)
{
    // Add framework services.
    services.AddEntityFramework()
        .AddSqlite()
        .AddDbContext&amp;lt;ApplicationDbContext&amp;gt;(options =&amp;gt;
            options.UseSqlite(Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;]));
    //…
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the connection string is defined in method Startup of class Startup and it looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;Configuration[&amp;quot;Data:DefaultConnection:ConnectionString&amp;quot;] = $@&amp;quot;Data Source={appEnv.ApplicationBasePath}/WebApplication.db&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When I tried access database I got following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;System.DllNotFoundException: Unable to load DLL &#39;sqlite3&#39;: The specified module could not be found.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It was due that I didn’t install SQLite.
To install SQLite I issued command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libsqlite3-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and then everything was ok.
But how I saw that error. By default application started in production mode. In this mode you cannot see a full error’s list.
To see it you must run application in Development mode. I simple ran application with this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;env ASPNET_ENV=”Development” dnx web
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and I saw full list of exceptions and found what was wrong.
Now I can start create my project.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;






&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Installing ASP .NET Core 1.0 on Ubuntu 14.04</title>
      <link>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</link>
      <pubDate>Tue, 08 Mar 2016 22:00:29 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;After my last impromptu post &lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;about Project Rider&lt;/a&gt;,
I’m finally writing about the setup of my
Linux environment for ASP .NET Core 1.0. I mentioned that I am going to play with ASP .NET Core 1.0 on
Ubuntu 14.04 but for sure I’ll also play with it on Windows. However, in this post I will describe
how I installed ASP .NET Core 1.0 on Ubuntu 14.04. I am not writing about how to install
Ubuntu 14.04 itself, as it’s not the place and time to write about this.&lt;/p&gt;

&lt;p&gt;My starting point for this process was on the official
&lt;a href=&#34;https://docs.asp.net/en/latest/getting-started/installing-on-linux.html&#34;&gt;asp.net page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I opened terminal (CTRL+SHIFT+T) and executed all the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install unzip curl  
curl -sSL https://raw.githubusercontent.com/aspnet/Home/dev/dnvminstall.sh | DNX_BRANCH=dev sh &amp;amp;&amp;amp; source ~/.dnx/dnvm/dnvm.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next I installed all the prerequisites for the DNX by issuing this line in terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libunwind8 gettext libssl-dev libcurl4-openssl-dev zlib1g libicu-dev uuid-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed DNX for .NET Core. issuing this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r coreclr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the commands executed smoothly and without errors.&lt;/p&gt;

&lt;p&gt;I also installed Mono. Firstly, I added the package repository to my system
by executing this in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF 
 echo &amp;quot;deb http://download.mono-project.com/repo/debian wheezy main&amp;quot; | sudo tee /etc/apt/sources.list.d/mono-xamarin.list
 sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I installed three mono packages with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install mono-devel mono-complete ca-certificates-mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I used the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dnvm upgrade -r mono
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to install DNX for mono.&lt;/p&gt;

&lt;p&gt;There is also one piece of the puzzle needed. To be able to run the application in server Kestrel I had to install &lt;em&gt;libuv&lt;/em&gt;.
I did this by issuing the following commands in shell:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install make automake libtool curl
curl -sSL https://github.com/libuv/libuv/archive/v1.8.0.tar.gz | sudo tar zxfv - -C /usr/local/src
cd /usr/local/src/libuv-1.8.0
sudo sh autogen.sh
sudo ./configure
sudo make
sudo make install
sudo rm -rf /usr/local/src/libuv-1.8.0 &amp;amp;&amp;amp; cd ~/
sudo ldconfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this I also added these two lines:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source dnvm.sh
export MONO_MANAGED_WATCHER=disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to my &lt;em&gt;~/.bash_profile&lt;/em&gt; file to ensure that I can always run the dnvm and dnu commands and
to work around a known bug in Mono.
You can find more information &lt;a href=&#34;https://code.visualstudio.com/Docs/runtimes/ASPnet5&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Having set up DNVM, and getting DNX done, I could now install the Visual Studio Code.
I’ve always wanted to try Visual Studio Code. I haven’t had the occasion
to do this until now. However, having access to the EAP version of Project Rider,
I am only waiting for better support of ASP .NET Core application in it and
I’ll give up Visual Studio Code.&lt;/p&gt;

&lt;p&gt;Installing Visual Studio Code was a piece of cake. I only downloaded the zip file from this
&lt;a href=&#34;https://code.visualstudio.com/docs?dv=linux64&#34;&gt;page&lt;/a&gt; and then I unzipped it
in a location that was convenient
for me, and inside the folder where I unzipped the VS Code I had an executable file named Code.
Double clicking on it launches the VS Code.&lt;/p&gt;

&lt;p&gt;To create the first ASP .NET Core 1.0 application I also needed &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;
and &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;. Yes, it’s true that nothing works these days without Node.js. Node.js and npm
are required to install and run &lt;a href=&#34;http://yeoman.io/&#34;&gt;Yeoman&lt;/a&gt;, &lt;a href=&#34;http://gulpjs.com/&#34;&gt;Gulp&lt;/a&gt;
and other massive amounts of Node.js packages.&lt;/p&gt;

&lt;p&gt;To install Node.js I use a &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;Node Version Manager&lt;/a&gt;.
I did this by issuing the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.30.2/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After installing nvm, I installed the recent version of Node.js which is 5.5.0, the issuing command was:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm install v5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I set it to the currently used version with the command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nvm use 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and finally I aliased it as the default version so that this version of Node could be used in any new shell.
I did this using the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvm alias default 5.5.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After this, I installed Yoeman then aspnet generator for Yoeman and finally Gulp and Bower.
This line executed in the terminal did the job:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; npm install -g yo generator-aspnet gulp bower
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All these steps with Node.js are required in order to have a nice generator
which helps you with the setup of
ASP .NET projects (&lt;a href=&#34;http://nancyfx.org/&#34;&gt;Nancy&lt;/a&gt; project also) and with other things,
for example, adding a new controller or view. However, I’ll write about this in the
&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;next post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;h3&gt;Related posts:&lt;/h3&gt;






&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enrolling in &#34;Daj się poznać&#34;</title>
      <link>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</link>
      <pubDate>Sun, 14 Feb 2016 13:27:14 +0100</pubDate>
      
      <guid>http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://dajsiepoznac.pl&#34;&gt;&lt;img src=&#34;http://koscielniak.me/post/2016/03/contestLogo.png&#34; alt=&#34;Daj się poznać&#34; title=&#34;Daj się poznać&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Recently, Maciej Aniserowicz wrote on his blog about starting the second edition of the
&lt;a href=&#34;http://www.maciejaniserowicz.com/daj-sie-poznac/&#34;&gt;“Daj się poznać”&lt;/a&gt;
competition. I’ve decided to take part in this challenge.
I started my blog over three weeks ago and since then I have made two posts.
I think that taking part in this contest will encourage me to have a more systematic approach to my blog.
I think this contest will be a lot of fun and provide a lot of opportunities for me to learn new things.
For the competition I am required to write an average of two articles a week for three months (minimum 10 weeks),
and this seems like a big deal to me.&lt;/p&gt;

&lt;p&gt;The contest will run from March to May and the winners will be announced in June.
Writing a blog is only one part of this undertaking, the other is completing a project and all blog posts must be
related to this project. I haven’t decided what my project will be but I have the whole of February to brainstorm.
I know that I want to learn and try some new technologies, for example, &lt;a href=&#34;https://get.asp.net/&#34;&gt;ASP .NET Core 1&lt;/a&gt;,
&lt;a href=&#34;https://angular.io/&#34;&gt;Angular 2&lt;/a&gt;, and this project will be a good occasion to do this.
Maybe I will also try to use &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;,
&lt;a href=&#34;https://azure.microsoft.com&#34;&gt;Azure&lt;/a&gt; or another cloud computing platform.
We’ll see, but for sure I want to gain a lot experience from this project.
Additionally, I am going to do this project on Ubuntu 14.04.
ASP .NET Core 1 is a cross-platform framework and I am going to try it out on environments other than Windows.&lt;/p&gt;

&lt;p&gt;As you can see, I’ll be treating this competition as source for many challenges: experiencing new technologies,
regular blogging, and systematic work on my “side project”.
Everything that I am going to use is currently in the Beta stage, so this is another challenge for me.
We will see what happens in June. I hope this will be great fun and that I will have a lot of great experiences,
so&amp;hellip;let’s do it!&lt;/p&gt;

&lt;h3&gt;Related posts:&lt;/h3&gt;






&lt;ul style=&#34;list-style: none;&#34;&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/02/enrolling-in-daj-sie-poznac/&#34;&gt;Enrolling in &#34;Daj się poznać&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/daj-sie-poznac-project-details/&#34;&gt;&#34;Daj się poznać&#34; - Project details&#34;&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/i-m-holding-a-project-rider-eap/&#34;&gt;I&#39;m holding a Project Rider EAP&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/installing-asp-dot-net-core-1-on-ubuntu-14/&#34;&gt;Installing ASP .NET Core 1 on Ubuntu 14.04&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;http://koscielniak.me/post/2016/03/my-first-asp-net-core-1-web-application/&#34;&gt;My first ASP NET Core 1.0 web application&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



</description>
    </item>
    
  </channel>
</rss>